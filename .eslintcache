[{"/Users/benajasandrain/GitHub/plotly-demo/src/App.tsx":"1","/Users/benajasandrain/GitHub/plotly-demo/src/pages/NotFoundPage.tsx":"2","/Users/benajasandrain/GitHub/plotly-demo/src/pages/graphpage.tsx":"3","/Users/benajasandrain/GitHub/plotly-demo/src/pages/HomePage.tsx":"4","/Users/benajasandrain/GitHub/plotly-demo/src/index.tsx":"5","/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx":"6","/Users/benajasandrain/GitHub/plotly-demo/src/pages/MultiTesting.tsx":"7","/Users/benajasandrain/GitHub/plotly-demo/src/classes/SingleGragh/index.tsx":"8","/Users/benajasandrain/GitHub/plotly-demo/src/classes/MultiGraph/index.tsx":"9","/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint/index.tsx":"10","/Users/benajasandrain/GitHub/plotly-demo/src/classes/SelectedPoint/index.tsx":"11","/Users/benajasandrain/GitHub/plotly-demo/src/Extraction/XmlToJson/index.tsx":"12"},{"size":1604,"mtime":1610735364908,"results":"13","hashOfConfig":"14"},{"size":760,"mtime":1607408485734,"results":"15","hashOfConfig":"14"},{"size":9932,"mtime":1610008907094,"results":"16","hashOfConfig":"14"},{"size":4949,"mtime":1610429318404,"results":"17","hashOfConfig":"14"},{"size":432,"mtime":1606895807510,"results":"18","hashOfConfig":"14"},{"size":7739,"mtime":1610526895674,"results":"19","hashOfConfig":"14"},{"size":2534,"mtime":1610427300993,"results":"20","hashOfConfig":"14"},{"size":9045,"mtime":1610735300263,"results":"21","hashOfConfig":"14"},{"size":10025,"mtime":1610734938088,"results":"22","hashOfConfig":"14"},{"size":4749,"mtime":1610614776453,"results":"23","hashOfConfig":"14"},{"size":4981,"mtime":1610619665096,"results":"24","hashOfConfig":"14"},{"size":9214,"mtime":1612256095574,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1g2b1g5",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/benajasandrain/GitHub/plotly-demo/src/App.tsx",["55","56","57","58"],"/Users/benajasandrain/GitHub/plotly-demo/src/pages/NotFoundPage.tsx",["59","60","61","62"],"import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Plot from \"react-plotly.js\";\nimport { Link } from \"react-router-dom\";\n\ninterface PageNotFoundPropsInterface extends RouteComponentProps<{}> {\n  // Other props that belong to component it self not Router\n}\n\nconst PageNotFound: React.FC<PageNotFoundPropsInterface> = () => {\n  return (\n    <div style={{ alignItems: \"center\", textAlign: \"center\" }}>\n      <h1>NOT FOUND</h1>\n      <div>\n        <div>\n          <h2>404 - ERROR IN THE ROUTE</h2>\n        </div>\n        <div>\n          <Link to={\"/home\"} type=\"button\">\n            Go to Home\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageNotFound;\n",["63","64"],"/Users/benajasandrain/GitHub/plotly-demo/src/pages/graphpage.tsx",["65","66","67","68","69","70"],"import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface GraphPagePropsInterface\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst GraphPage: React.FC<GraphPagePropsInterface> = (\n  props: GraphPagePropsInterface\n) => {\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  const dailyValues: DailyExchange[] = [];\n  let dailyValuesOrdinate: number[] = [];\n  let dates: Date[] = [];\n  const defaultStartDate: Date = new Date(2000, 0, 0);\n  const defaultEndDate: Date = new Date();\n\n  const [fetchUrl, setfetchUrl] = useState<any>();\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [xx, setxx] = useState<Date[]>([]);\n  const [yy, setyy] = useState<number[]>([]);\n  const [isVolume, SetIsVolume] = useState(value === \"Volume\");\n  const [startDate, setStartDate] = useState<Date>(defaultStartDate);\n  const [endDate, setEndDate] = useState<Date>(defaultEndDate);\n\n  // const selectCompany = JSON.stringify(companies);\n  // const selectCompanyArray: any[] = JSON.parse(selectCompany);\n  // const fetching: string = selectCompanyArray.find(\n  //   (comp) => comp.company === company\n  // );\n  const fetching = companies.companies.find((comp) => comp.company === company)\n    ?.JsonUrl;\n  console.log(\"we are fetching: \" + fetching);\n\n  const companyName = companies.companies.find(\n    (comp) => comp.company === company\n  )?.name;\n\n  const GraphTitle: string =\n    companyName?.toUpperCase() + \" - Stock Market: (\" + option + \")\";\n\n  useEffect(() => {\n    setfetchUrl(fetching);\n    async function data(toFetch: string): Promise<any[]> {\n      const response = await fetch(toFetch)\n        .then(function (response: any) {\n          console.log(\"Successful fetch at \" + toFetch);\n          return response.json();\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n      return Promise.resolve(response);\n    }\n    data(fetchUrl).then((response) => {\n      const stockEvents: any[] = response;\n      console.log(stockEvents?.length);\n      console.log(stockEvents);\n      for (let i: number = 0; i < stockEvents?.length; i++) {\n        let tempString: string = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n        let obj = JSON.parse(tempString);\n        let dailyExchangeObj: DailyExchange = {\n          date: obj.Date,\n          high: obj.High,\n          low: obj.Low,\n          open: obj.Open,\n          volume: obj.Volume,\n          close: obj.Close,\n        };\n        dailyValues.push(dailyExchangeObj);\n      }\n      populateGraphValue();\n    });\n    setValue(option);\n  }, [fetchUrl, startDate, endDate]);\n\n  function populateGraphValue(): void {\n    for (let i = 0; i < dailyValues.length; i++) {\n      const tempDate = toDateObject(dailyValues[i].date);\n      if (tempDate >= startDate && tempDate <= endDate) {\n        manageOption(dailyValues[i]);\n        dates.push(tempDate);\n      }\n    }\n    setxx(dates);\n    setyy(dailyValuesOrdinate);\n  }\n\n  function manageOption(obj: DailyExchange): void {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        SetIsVolume(true);\n        break;\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function extract(obj: any): DailyExchange {\n    // given an object, it return the DailyExchange corresponding\n    let temp: DailyExchange = {\n      date: obj.Date,\n      high: obj.High,\n      low: obj.Low,\n      open: obj.Open,\n      volume: obj.Volume,\n      close: obj.close,\n    };\n\n    return temp;\n  }\n\n  function toDateObject(dateString: string): Date {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleAuthClick(event: any) {\n    setTrigger(!trigger);\n  }\n\n  function handleChange(event) {\n    const linkvalue: string = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  const options = [\"volume\", \"open\", \"close\", \"high\", \"low\"];\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12px\" }}>\n      <div style={{ paddingBottom: \"15px\" }}>\n        <Link to={\"/home\"} type=\"button\">\n          Go to Home\n        </Link>\n      </div>\n      <div>\n        <label>\n          Pick the chart to display:\n          <select value={value} onChange={handleChange}>\n            <option value=\"Close\">Select from Menu</option>\n            <option value=\"Open\">Open</option>\n            <option value=\"Volume\">Volume</option>\n            <option value=\"Close\">Close</option>\n            <option value=\"High\">High</option>\n            <option value=\"Low\">Low</option>\n          </select>\n        </label>\n        <a href={extension} style={{ paddingLeft: \"8px\" }}>\n          Visualize{\" \"}\n        </a>\n        {/* <Link to={extension} type=\"button\" className=\"btn btn-primary\">\n          Visualize\n        </Link> */}\n      </div>\n      <div>\n        {!isVolume ? (\n          <Plot\n            data={[\n              {\n                // x: [1, 2, 3, 7],\n                // y: [2, 6, 3, 9],\n                x: xx,\n                y: yy,\n                type: \"scatter\",\n                // mode: \"lines+markers\",\n                mode: \"lines\",\n                marker: { color: \"red\" },\n                name: \"Data\",\n              },\n              // ,\n              // {\n              //   x: [1, 2, 3, 7],\n              //   y: [2, 6, 3, 9],\n              //   type: \"scatter\",\n              //   // mode: \"lines+markers\",\n              //   mode: \"lines\",\n              //   marker: { color: \"red\" },\n              // },\n            ]}\n            //onClick={window.alert(\"I clicked on a dot\")}\n            legend={{\n              orientation: \"h\",\n              yanchor: \"right\",\n            }}\n            layout={{\n              showlegend: true,\n              width: 1000,\n              height: 600,\n              title: {\n                text: GraphTitle,\n                font: {\n                  size: 24,\n                },\n              },\n              grid: {\n                yside: \"right plot\",\n              },\n              xaxis: {\n                visible: true,\n                color: \"#2c3e50\",\n                title: {\n                  text: \"Dates\",\n                },\n              },\n              yaxis: {\n                visible: true,\n                color: \"#2c3e50\",\n                title: {\n                  text: \"Values\",\n                },\n              },\n            }}\n          />\n        ) : (\n          <div></div>\n        )}\n        {isVolume ? (\n          <Plot\n            data={[\n              {\n                x: xx,\n                y: yy,\n                type: \"bar\",\n                mode: \"lines\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            //onClick={window.alert(\"I clicked on a dot\")}\n            layout={{\n              width: 1000,\n              height: 600,\n              title: GraphTitle,\n            }}\n          />\n        ) : (\n          <div></div>\n        )}\n      </div>\n      {/* <div className=\"container\">\n        <div className=\"row\">\n          <div>\n            <div className=\"col-sm-12\">\n              <h3> change start Date </h3>\n              <DatePicker\n                selected={startDate}\n                onChange={(date) => setStartDate(date)}\n              />\n            </div>\n            <div className=\"col-sm-12\">\n              <h3> change End Date </h3>\n              <DatePicker\n                selected={endDate}\n                onChange={(date) => setEndDate(date)}\n              />\n            </div>\n          </div>\n        </div>\n      </div> */}\n      <Container fluid=\"md\">\n        <Row>\n          <div>\n            <Col>\n              <div>\n                <h3> change start Date </h3>\n                <DatePicker\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  showTimeSelect\n                  dateFormat=\"Pp\"\n                />\n              </div>\n            </Col>\n            <Col>\n              <div>\n                <h3> change End Date </h3>\n                <DatePicker\n                  selected={endDate}\n                  onChange={(date) => setEndDate(date)}\n                  showTimeSelect\n                  dateFormat=\"Pp\"\n                />\n              </div>\n            </Col>\n          </div>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default GraphPage;\n","/Users/benajasandrain/GitHub/plotly-demo/src/pages/HomePage.tsx",["71","72","73","74","75","76"],"import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"@emotion/styled\";\nimport * as companies from \"../data/urlMatcher.json\";\n// npm install @emotion/react\n// npm install @emotion/styled\n\ninterface HomePagePropsInterface extends RouteComponentProps<{}> {\n  // Other props that belong to component it self not Router\n}\n\nconst HomePage: React.FC<HomePagePropsInterface> = () => {\n  const [extension, setExtension] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [multipleExtension, setMultipleExtension] = useState<string>(\"\");\n  const [isSelected, SetIsSelected] = useState<boolean>();\n  const [includedIds, setIncludedIds] = useState<string[]>([]);\n  const [companyInfo, SetCompanyinfo] = useState<CompanyInfo[]>([]);\n\n  const companyList = companies.companies;\n\n  type CompanyInfo = {\n    name: string;\n    tag: string;\n    id: string;\n  };\n\n  useEffect(() => {\n    let tempArray: CompanyInfo[] = [];\n    for (let i: number = 0; i < companyList.length; i++) {\n      let tempObj: CompanyInfo = {\n        name: companyList[i].name,\n        id: companyList[i].id,\n        tag: companyList[i].company,\n      };\n      tempArray.push(tempObj);\n    }\n    SetCompanyinfo(tempArray);\n  }, []);\n\n  function buildLink(company: string): string {\n    const link = \"/visual/\" + company + \"/close\";\n    return link;\n  }\n\n  function buildLinkMultiple(company: string): string {\n    const link = \"/visualMultiple/\" + company + \"/close\";\n    console.log(link);\n    return link;\n  }\n\n  //visualMultiple\n  function handleCheckedBoxes(ChangeEvent) {\n    const id: string = ChangeEvent.target.value;\n    let found: boolean = false;\n    for (let i = 0; i < includedIds.length; i++) {\n      if (includedIds[i] === id) {\n        found = true;\n      }\n    }\n    if (found) {\n      // remove from include\n      const tempArray = includedIds.filter((item) => item != id);\n      console.log(\"EXIST\");\n      setIncludedIds(tempArray);\n    } else {\n      console.log(\"N-EXIST\");\n      const tempArray = includedIds;\n      tempArray.push(id);\n      setIncludedIds(tempArray);\n    }\n    console.log(includedIds);\n    handleMultipleSelect();\n  }\n\n  function handleSelection(ChangeEvent) {\n    const value: string = ChangeEvent.target.value;\n    setExtension(buildLink(value));\n    setSelectedOption(value);\n  }\n\n  function handleMultipleSelect() {\n    let lists: string = \"\";\n    for (const id of includedIds) {\n      lists = lists.concat(id.concat(\"+\"));\n    }\n    // setMultipleExtension(lists);\n    console.log(multipleExtension);\n    setMultipleExtension(buildLinkMultiple(lists));\n  }\n\n  const LinkName = styled.div`\n    paddingbottom: 1rem;\n  `;\n\n  function createAllRadioButton() {\n    return companyInfo.map((item) => {\n      return <div key={item.tag}>{createRadioButton(item.tag, item.name)}</div>;\n    });\n  }\n\n  function createRadioButton(tag: string, name: string) {\n    return (\n      <div className=\"radio\">\n        <label>\n          <input\n            type=\"radio\"\n            value={tag}\n            checked={selectedOption === tag}\n            onChange={handleSelection}\n          />\n          {name}\n        </label>\n      </div>\n    );\n  }\n\n  function createAllCheckBoxes() {\n    return companyInfo.map((item) => {\n      return <div key={item.id}>{createCheckBoxes(item.id, item.name)}</div>;\n    });\n  }\n\n  function createCheckBoxes(tag: string, name: string) {\n    return (\n      <div className=\"checkbox\">\n        <label>\n          <input\n            type=\"checkbox\"\n            value={tag}\n            checked={includedIds.some((item) => item === tag)}\n            onChange={handleCheckedBoxes}\n          />\n          {name}\n        </label>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"25px\" }}>\n      <h1 style={{ alignItems: \"center\" }}>\n        Welcome to The Graphing Tool Demo\n      </h1>\n      <div>\n        <div>\n          <h2>Please select from the following option</h2>\n        </div>\n        <form>{createAllRadioButton()}</form>\n        <div style={{ paddingTop: \"15px\" }}>\n          <Link to={extension} type=\"submit\" className=\"btn btn-default\">\n            Visualize The selected Stock\n          </Link>\n        </div>\n      </div>\n\n      <div>\n        <div>\n          <h2>Please select 1 or more from the following option to display</h2>\n        </div>\n        <form>{createAllCheckBoxes()}</form>\n        <div style={{ paddingTop: \"15px\" }}>\n          {/* <a href={multipleExtension} onClick={handleMultipleSelect}>\n            Visualize The selected Stocks\n          </a> */}\n          <Link\n            to={multipleExtension}\n            type=\"submit\"\n            className=\"btn btn-default\"\n          >\n            Visualize The selected Stocks\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","/Users/benajasandrain/GitHub/plotly-demo/src/index.tsx",[],"/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx",["77","78","79","80","81","82"],"/Users/benajasandrain/GitHub/plotly-demo/src/pages/MultiTesting.tsx",["83","84","85","86","87","88","89","90","91","92"],"import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface GraphPagePropsInterface extends RouteComponentProps<{}> {\n  // Other props that belong to component it self not Router\n}\n\nconst MultiTesting: React.FC<GraphPagePropsInterface> = (\n  props: GraphPagePropsInterface\n) => {\n  const trace1 = {\n    x: [1, 2, 3],\n    y: [7, 5, 6],\n    name: \"yaxis1 data\",\n    yaxis: \"y\",\n    type: \"scatter\",\n  };\n  console.log(trace1);\n\n  const trace2 = {\n    x: [2, 3, 4],\n    y: [40, 50, 80],\n    name: \"yaxis2 data\",\n    yaxis: \"y2\",\n    type: \"scatter\",\n  };\n  console.log(trace2);\n\n  const trace3 = {\n    x: [1, 3, 5],\n    y: [40000, 50000, 60000],\n    name: \"yaxis3 data\",\n    yaxis: \"y3\",\n    type: \"scatter\",\n  };\n  console.log(trace3);\n\n  const trace4 = {\n    x: [7, 6, 5],\n    y: [400000, 500000, 600000],\n    name: \"yaxis4 data\",\n    yaxis: \"y4\",\n    type: \"scatter\",\n  };\n  console.log(trace4);\n\n  const data = [trace1, trace2, trace3, trace4];\n\n  const layout = {\n    title: \"multiple y-axes example\",\n    width: 800,\n    xaxis: { domain: [0.3, 0.7] },\n    yaxis: {\n      title: \"yaxis title\",\n      titlefont: { color: \"#1f77b4\" },\n      tickfont: { color: \"#1f77b4\" },\n    },\n    yaxis2: {\n      title: \"yaxis2 title\",\n      titlefont: { color: \"#ff7f0e\" },\n      tickfont: { color: \"#ff7f0e\" },\n      anchor: \"free\",\n      overlaying: \"y\",\n      side: \"left\",\n      position: 0.15,\n    },\n    yaxis3: {\n      title: \"yaxis4 title\",\n      titlefont: { color: \"#d62728\" },\n      tickfont: { color: \"#d62728\" },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"right\",\n    },\n    yaxis4: {\n      title: \"yaxis5 title\",\n      titlefont: { color: \"#9467bd\" },\n      tickfont: { color: \"#9467bd\" },\n      anchor: \"free\",\n      overlaying: \"y\",\n      side: \"right\",\n      position: 0.85,\n    },\n  };\n\n  return (\n    <div>\n      <Plot data={data} layout={layout} />\n    </div>\n  );\n};\n\nexport default MultiTesting;\n","/Users/benajasandrain/GitHub/plotly-demo/src/classes/SingleGragh/index.tsx",["93","94","95","96"],"/Users/benajasandrain/GitHub/plotly-demo/src/classes/MultiGraph/index.tsx",["97","98","99","100","101","102","103","104","105"],"/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint/index.tsx",["106","107","108","109","110","111","112"],"/Users/benajasandrain/GitHub/plotly-demo/src/classes/SelectedPoint/index.tsx",["113","114","115","116","117","118","119"],"/Users/benajasandrain/GitHub/plotly-demo/src/Extraction/XmlToJson/index.tsx",["120","121","122","123"],{"ruleId":"124","severity":1,"message":"125","line":2,"column":17,"nodeType":"126","messageId":"127","endLine":2,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":2,"column":28,"nodeType":"126","messageId":"127","endLine":2,"endColumn":36},{"ruleId":"124","severity":1,"message":"129","line":15,"column":8,"nodeType":"126","messageId":"127","endLine":15,"endColumn":20},{"ruleId":"124","severity":1,"message":"130","line":17,"column":8,"nodeType":"126","messageId":"127","endLine":17,"endColumn":19},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"131","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":47},{"ruleId":"124","severity":1,"message":"132","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":12},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"137","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":104,"column":6,"nodeType":"140","endLine":104,"endColumn":36,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"142","line":142,"column":12,"nodeType":"126","messageId":"127","endLine":142,"endColumn":19},{"ruleId":"124","severity":1,"message":"143","line":163,"column":12,"nodeType":"126","messageId":"127","endLine":163,"endColumn":27},{"ruleId":"124","severity":1,"message":"144","line":174,"column":9,"nodeType":"126","messageId":"127","endLine":174,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"145","line":17,"column":10,"nodeType":"126","messageId":"127","endLine":17,"endColumn":20},{"ruleId":"124","severity":1,"message":"146","line":17,"column":22,"nodeType":"126","messageId":"127","endLine":17,"endColumn":35},{"ruleId":"138","severity":1,"message":"147","line":40,"column":6,"nodeType":"140","endLine":40,"endColumn":8,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":64,"column":59,"nodeType":"151","messageId":"152","endLine":64,"endColumn":61},{"ruleId":"124","severity":1,"message":"153","line":93,"column":9,"nodeType":"126","messageId":"127","endLine":93,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"154","line":52,"column":9,"nodeType":"126","messageId":"127","endLine":52,"endColumn":15},{"ruleId":"124","severity":1,"message":"155","line":82,"column":10,"nodeType":"126","messageId":"127","endLine":82,"endColumn":17},{"ruleId":"124","severity":1,"message":"156","line":85,"column":10,"nodeType":"126","messageId":"127","endLine":85,"endColumn":20},{"ruleId":"124","severity":1,"message":"157","line":85,"column":22,"nodeType":"126","messageId":"127","endLine":85,"endColumn":35},{"ruleId":"138","severity":1,"message":"158","line":133,"column":6,"nodeType":"140","endLine":133,"endColumn":8,"suggestions":"159"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"131","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":47},{"ruleId":"124","severity":1,"message":"160","line":4,"column":13,"nodeType":"126","messageId":"127","endLine":4,"endColumn":22},{"ruleId":"124","severity":1,"message":"161","line":5,"column":10,"nodeType":"126","messageId":"127","endLine":5,"endColumn":14},{"ruleId":"124","severity":1,"message":"137","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":14},{"ruleId":"124","severity":1,"message":"162","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":18},{"ruleId":"124","severity":1,"message":"163","line":10,"column":10,"nodeType":"126","messageId":"127","endLine":10,"endColumn":19},{"ruleId":"124","severity":1,"message":"164","line":10,"column":21,"nodeType":"126","messageId":"127","endLine":10,"endColumn":24},{"ruleId":"124","severity":1,"message":"165","line":10,"column":26,"nodeType":"126","messageId":"127","endLine":10,"endColumn":29},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"131","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":47},{"ruleId":"124","severity":1,"message":"137","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":14},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"131","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":47},{"ruleId":"124","severity":1,"message":"137","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":14},{"ruleId":"124","severity":1,"message":"162","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":18},{"ruleId":"124","severity":1,"message":"163","line":10,"column":10,"nodeType":"126","messageId":"127","endLine":10,"endColumn":19},{"ruleId":"124","severity":1,"message":"164","line":10,"column":21,"nodeType":"126","messageId":"127","endLine":10,"endColumn":24},{"ruleId":"124","severity":1,"message":"165","line":10,"column":26,"nodeType":"126","messageId":"127","endLine":10,"endColumn":29},{"ruleId":"124","severity":1,"message":"166","line":15,"column":8,"nodeType":"126","messageId":"127","endLine":15,"endColumn":21},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"131","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":47},{"ruleId":"124","severity":1,"message":"163","line":6,"column":10,"nodeType":"126","messageId":"127","endLine":6,"endColumn":19},{"ruleId":"124","severity":1,"message":"164","line":6,"column":21,"nodeType":"126","messageId":"127","endLine":6,"endColumn":24},{"ruleId":"124","severity":1,"message":"165","line":6,"column":26,"nodeType":"126","messageId":"127","endLine":6,"endColumn":29},{"ruleId":"124","severity":1,"message":"167","line":7,"column":10,"nodeType":"126","messageId":"127","endLine":7,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"131","line":1,"column":38,"nodeType":"126","messageId":"127","endLine":1,"endColumn":47},{"ruleId":"124","severity":1,"message":"163","line":7,"column":10,"nodeType":"126","messageId":"127","endLine":7,"endColumn":19},{"ruleId":"124","severity":1,"message":"164","line":7,"column":21,"nodeType":"126","messageId":"127","endLine":7,"endColumn":24},{"ruleId":"124","severity":1,"message":"165","line":7,"column":26,"nodeType":"126","messageId":"127","endLine":7,"endColumn":29},{"ruleId":"124","severity":1,"message":"167","line":8,"column":10,"nodeType":"126","messageId":"127","endLine":8,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":26},{"ruleId":"168","severity":1,"message":"169","line":87,"column":28,"nodeType":"126","messageId":"170","endLine":87,"endColumn":29},{"ruleId":"171","severity":1,"message":"172","line":156,"column":24,"nodeType":"173","messageId":"174","endLine":156,"endColumn":25,"suggestions":"175"},{"ruleId":"124","severity":1,"message":"176","line":205,"column":20,"nodeType":"126","messageId":"127","endLine":205,"endColumn":28},"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'CombineGraph' is defined but never used.","'SingleGraph' is defined but never used.","'useEffect' is defined but never used.","'Plot' is defined but never used.","no-native-reassign",["177"],"no-negated-in-lhs",["178"],"'Select' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dailyValues', 'fetching', 'option', and 'populateGraphValue'. Either include them or remove the dependency array.","ArrayExpression",["179"],"'extract' is defined but never used.","'handleAuthClick' is defined but never used.","'options' is assigned a value but never used.","'isSelected' is assigned a value but never used.","'SetIsSelected' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'companyList'. Either include it or remove the dependency array.",["180"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'LinkName' is assigned a value but never used.","'yaxis2' is assigned a value but never used.","'trigger' is assigned a value but never used.","'GraphTitle' is assigned a value but never used.","'setGraphTitle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'companyList', 'option', and 'process'. Either include them or remove the dependency array.",["181"],"'companies' is defined but never used.","'Link' is defined but never used.","'DatePicker' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'SelectedPoint' is defined but never used.","'ComponentProps' is defined but never used.","@typescript-eslint/no-redeclare","'n' is already defined.","redeclared","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["182","183"],"'textData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"messageId":"190","fix":"191","desc":"192"},{"messageId":"193","fix":"194","desc":"195"},"Update the dependencies array to be: [fetchUrl, startDate, endDate, fetching, option, populateGraphValue, dailyValues]",{"range":"196","text":"197"},"Update the dependencies array to be: [companyList]",{"range":"198","text":"199"},"Update the dependencies array to be: [companyList, option, process]",{"range":"200","text":"201"},"removeEscape",{"range":"202","text":"203"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"204","text":"205"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[3619,3649],"[fetchUrl, startDate, endDate, fetching, option, populateGraphValue, dailyValues]",[1343,1345],"[companyList]",[3776,3778],"[companyList, option, process]",[6264,6265],"",[6264,6264],"\\"]