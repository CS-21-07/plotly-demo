{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/graphpage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"; // npm install react-datepicker --save\n\nconst GraphPage = props => {\n  _s();\n\n  var _companies$companies$, _companies$companies$2;\n\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n  const dailyValues = [];\n  let dailyValuesOrdinate = [];\n  let dates = [];\n  const defaultStartDate = new Date(2000, 0, 0);\n  const defaultEndDate = new Date();\n  const [fetchUrl, setfetchUrl] = useState();\n  const [trigger, setTrigger] = useState(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState(\"Close\");\n  const [xx, setxx] = useState([]);\n  const [yy, setyy] = useState([]);\n  const [isVolume, SetIsVolume] = useState(value === \"Volume\");\n  const [startDate, setStartDate] = useState(defaultStartDate);\n  const [endDate, setEndDate] = useState(defaultEndDate); // const selectCompany = JSON.stringify(companies);\n  // const selectCompanyArray: any[] = JSON.parse(selectCompany);\n  // const fetching: string = selectCompanyArray.find(\n  //   (comp) => comp.company === company\n  // );\n\n  const fetching = (_companies$companies$ = companies.companies.find(comp => comp.company === company)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n  console.log(\"we are fetching: \" + fetching);\n  const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.company === company)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n  const GraphTitle = (companyName === null || companyName === void 0 ? void 0 : companyName.toUpperCase()) + \" - Stock Market: (\" + option + \")\";\n  useEffect(() => {\n    setfetchUrl(fetching);\n\n    async function data() {\n      const response = await fetch(fetchUrl).then(function (response) {\n        console.log(\"Successful fetch\");\n        return response.json();\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n      return Promise.resolve(response);\n    }\n\n    data().then(response => {\n      const stockEvents = response;\n      console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n      console.log(stockEvents);\n\n      for (let i = 0; i < (stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length); i++) {\n        let tempString = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n\n        let obj = JSON.parse(tempString);\n        let dailyExchangeObj = {\n          date: obj.Date,\n          high: obj.High,\n          low: obj.Low,\n          open: obj.Open,\n          volume: obj.Volume,\n          close: obj.Close\n        };\n        dailyValues.push(dailyExchangeObj);\n      }\n\n      populateGraphValue();\n    });\n    setValue(option);\n  }, [fetchUrl]);\n\n  function populateGraphValue() {\n    for (let i = 0; i < dailyValues.length; i++) {\n      manageOption(dailyValues[i]);\n      dates.push(toDateObject(dailyValues[i].date));\n    }\n\n    setxx(dates);\n    setyy(dailyValuesOrdinate);\n  }\n\n  function manageOption(obj) {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        SetIsVolume(true);\n        break;\n\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function extract(obj) {\n    // given an object, it return the DailyExchange corresponding\n    let temp = {\n      date: obj.Date,\n      high: obj.High,\n      low: obj.Low,\n      open: obj.Open,\n      volume: obj.Volume,\n      close: obj.close\n    };\n    return temp;\n  }\n\n  function toDateObject(dateString) {\n    const temp = dateString.split(\"-\");\n    const date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleAuthClick(event) {\n    setTrigger(!trigger);\n  }\n\n  function handleChange(event) {\n    const linkvalue = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  const options = [\"volume\", \"open\", \"close\", \"high\", \"low\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/home\",\n        type: \"button\",\n        children: \"Go to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: value,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Select from Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Open\",\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Volume\",\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: extension,\n        children: \"Visualize \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!isVolume ? /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          // x: [1, 2, 3, 7],\n          // y: [2, 6, 3, 9],\n          x: xx,\n          y: yy,\n          type: \"scatter\",\n          // mode: \"lines+markers\",\n          mode: \"lines\",\n          marker: {\n            color: \"red\"\n          }\n        }],\n        layout: {\n          width: 1000,\n          height: 600,\n          title: GraphTitle\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), isVolume ? /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: xx,\n          y: yy,\n          type: \"bar\",\n          mode: \"lines\",\n          marker: {\n            color: \"red\"\n          }\n        }],\n        layout: {\n          width: 1000,\n          height: 600,\n          title: GraphTitle\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" change start Date \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: startDate,\n              onChange: date => setStartDate(date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-sm-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \" change start Date \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: endDate,\n              onChange: date => setEndDate(date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GraphPage, \"ekVv9t+JG9EqlL/RHfG/dUW4akI=\");\n\n_c = GraphPage;\nexport default GraphPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphPage\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/graphpage.tsx"],"names":["React","useState","useEffect","Plot","companies","Link","DatePicker","GraphPage","props","company","match","params","option","dailyValues","dailyValuesOrdinate","dates","defaultStartDate","Date","defaultEndDate","fetchUrl","setfetchUrl","trigger","setTrigger","extension","setExtension","value","setValue","xx","setxx","yy","setyy","isVolume","SetIsVolume","startDate","setStartDate","endDate","setEndDate","fetching","find","comp","JsonUrl","console","log","companyName","name","GraphTitle","toUpperCase","data","response","fetch","then","json","catch","err","Promise","resolve","stockEvents","length","i","tempString","JSON","stringify","obj","parse","dailyExchangeObj","date","high","High","low","Low","open","Open","volume","Volume","close","Close","push","populateGraphValue","manageOption","toDateObject","extract","temp","dateString","split","setFullYear","parseInt","handleAuthClick","event","handleChange","linkvalue","target","toLowerCase","options","alignItems","margin","x","y","type","mode","marker","color","width","height","title"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\n\ninterface GraphPagePropsInterface\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst GraphPage: React.FC<GraphPagePropsInterface> = (\n  props: GraphPagePropsInterface\n) => {\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  const dailyValues: DailyExchange[] = [];\n  let dailyValuesOrdinate: number[] = [];\n  let dates: Date[] = [];\n  const defaultStartDate: Date = new Date(2000, 0, 0);\n  const defaultEndDate: Date = new Date();\n\n  const [fetchUrl, setfetchUrl] = useState<any>();\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [xx, setxx] = useState<Date[]>([]);\n  const [yy, setyy] = useState<number[]>([]);\n  const [isVolume, SetIsVolume] = useState(value === \"Volume\");\n  const [startDate, setStartDate] = useState<Date>(defaultStartDate);\n  const [endDate, setEndDate] = useState<Date>(defaultEndDate);\n\n  // const selectCompany = JSON.stringify(companies);\n  // const selectCompanyArray: any[] = JSON.parse(selectCompany);\n  // const fetching: string = selectCompanyArray.find(\n  //   (comp) => comp.company === company\n  // );\n  const fetching = companies.companies.find((comp) => comp.company === company)\n    ?.JsonUrl;\n  console.log(\"we are fetching: \" + fetching);\n\n  const companyName = companies.companies.find(\n    (comp) => comp.company === company\n  )?.name;\n\n  const GraphTitle: string =\n    companyName?.toUpperCase() + \" - Stock Market: (\" + option + \")\";\n\n  useEffect(() => {\n    setfetchUrl(fetching);\n    async function data(): Promise<any[]> {\n      const response = await fetch(fetchUrl)\n        .then(function (response: any) {\n          console.log(\"Successful fetch\");\n          return response.json();\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n      return Promise.resolve(response);\n    }\n    data().then((response) => {\n      const stockEvents: any[] = response;\n      console.log(stockEvents?.length);\n      console.log(stockEvents);\n      for (let i: number = 0; i < stockEvents?.length; i++) {\n        let tempString: string = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n        let obj = JSON.parse(tempString);\n        let dailyExchangeObj: DailyExchange = {\n          date: obj.Date,\n          high: obj.High,\n          low: obj.Low,\n          open: obj.Open,\n          volume: obj.Volume,\n          close: obj.Close,\n        };\n        dailyValues.push(dailyExchangeObj);\n      }\n      populateGraphValue();\n    });\n    setValue(option);\n  }, [fetchUrl]);\n\n  function populateGraphValue(): void {\n    for (let i = 0; i < dailyValues.length; i++) {\n      manageOption(dailyValues[i]);\n      dates.push(toDateObject(dailyValues[i].date));\n    }\n    setxx(dates);\n    setyy(dailyValuesOrdinate);\n  }\n\n  function manageOption(obj: DailyExchange): void {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        SetIsVolume(true);\n        break;\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function extract(obj: any): DailyExchange {\n    // given an object, it return the DailyExchange corresponding\n    let temp: DailyExchange = {\n      date: obj.Date,\n      high: obj.High,\n      low: obj.Low,\n      open: obj.Open,\n      volume: obj.Volume,\n      close: obj.close,\n    };\n\n    return temp;\n  }\n\n  function toDateObject(dateString: string): Date {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleAuthClick(event: any) {\n    setTrigger(!trigger);\n  }\n\n  function handleChange(event) {\n    const linkvalue: string = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  const options = [\"volume\", \"open\", \"close\", \"high\", \"low\"];\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12\" }}>\n      {/* <button\n        className=\"btn btn-primary\"\n        id=\"authorize_button\"\n        onClick={handleAuthClick}\n        style={{\n          height: \"100%\",\n          justifyContent: \"center\",\n          alignSelf: \"center\",\n          display: \"block\",\n          float: \"left\",\n          margin: 30,\n        }}\n      >\n        display\n      </button> */}\n      <div>\n        <Link to={\"/home\"} type=\"button\">\n          Go to Home\n        </Link>\n      </div>\n      <div>\n        <label>\n          Pick the chart to display:\n          <select value={value} onChange={handleChange}>\n            <option value=\"Close\">Select from Menu</option>\n            <option value=\"Open\">Open</option>\n            <option value=\"Volume\">Volume</option>\n            <option value=\"Close\">Close</option>\n            <option value=\"High\">High</option>\n            <option value=\"Low\">Low</option>\n          </select>\n        </label>\n        <a href={extension}>Visualize </a>\n        {/* <Link to={extension} type=\"button\" className=\"btn btn-primary\">\n          Visualize\n        </Link> */}\n      </div>\n      <div>\n        {!isVolume ? (\n          <Plot\n            data={[\n              {\n                // x: [1, 2, 3, 7],\n                // y: [2, 6, 3, 9],\n                x: xx,\n                y: yy,\n                type: \"scatter\",\n                // mode: \"lines+markers\",\n                mode: \"lines\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            layout={{\n              width: 1000,\n              height: 600,\n              title: GraphTitle,\n            }}\n          />\n        ) : (\n          <div></div>\n        )}\n        {isVolume ? (\n          <Plot\n            data={[\n              {\n                x: xx,\n                y: yy,\n                type: \"bar\",\n                mode: \"lines\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            layout={{\n              width: 1000,\n              height: 600,\n              title: GraphTitle,\n            }}\n          />\n        ) : (\n          <div></div>\n        )}\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div>\n            <div className=\"col-sm-12\">\n              <h3> change start Date </h3>\n              <DatePicker\n                selected={startDate}\n                onChange={(date) => setStartDate(date)}\n              />\n            </div>\n            <div className=\"col-sm-12\">\n              <h3> change start Date </h3>\n              <DatePicker\n                selected={endDate}\n                onChange={(date) => setEndDate(date)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphPage;\n"]},"metadata":{},"sourceType":"module"}