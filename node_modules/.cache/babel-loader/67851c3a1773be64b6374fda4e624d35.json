{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/classes/MultiGraph/index.tsx\";\nimport React from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport \"react-datepicker/dist/react-datepicker.css\"; // npm install react-datepicker --save\n\n//npm install react-bootstrap bootstrap\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport SelectedPoint from \"../../pages/Components/SelectedPoint\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nclass MultiGraph extends React.Component {\n  //   const defaultStartDate: Date = new Date(2000, 0, 0);\n  //   const defaultEndDate: Date = new Date();\n  constructor(props) {\n    var _companies$companies$, _companies$companies$2;\n\n    super(props);\n    this.company = void 0;\n    this.option = void 0;\n    this.dailyValues = [];\n    this.dailyValuesOrdinate = [];\n    this.dates = [];\n    this.fetchUrl = void 0;\n    this.trigger = true;\n    this.extension = \"\";\n    this.value = \"Close\";\n    this.xx = [];\n    this.yy = [];\n    this.isVolume = void 0;\n    this.startDate = new Date(2000, 0, 0);\n    this.endDate = new Date();\n    this.GraphTitle = void 0;\n    this.companyList = void 0;\n    this.dataGraph = [];\n    this.plotGraphData = [];\n    this.xValues = [];\n    this.stockEvents = [];\n    this.state = {\n      loading: true\n    };\n    this.yaxis = {\n      title: \"yaxis title\",\n      titlefont: {\n        color: \"#1f77b4\"\n      },\n      tickfont: {\n        color: \"#1f77b4\"\n      }\n    };\n    this.yaxis2 = {\n      title: \"yaxis2 title\",\n      titlefont: {\n        color: \"#ff7f0e\"\n      },\n      tickfont: {\n        color: \"#ff7f0e\"\n      },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"left\",\n      position: 0.15\n    };\n    this.yaxis3 = {\n      title: \"yaxis4 title\",\n      titlefont: {\n        color: \"#d62728\"\n      },\n      tickfont: {\n        color: \"#d62728\"\n      },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"right\"\n    };\n    this.yaxis4 = {\n      title: \"yaxis5 title\",\n      titlefont: {\n        color: \"#9467bd\"\n      },\n      tickfont: {\n        color: \"#9467bd\"\n      },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"right\",\n      position: 0.85\n    };\n\n    this.populateGraphValue = (dailyValuesList, graphTitle) => {\n      let dailyValuesOrdinate = [];\n      let dates = [];\n      console.log(dailyValuesList);\n      dailyValuesList.forEach(daily => {\n        dailyValuesOrdinate.push(this.manageOption(daily));\n        dates.push(this.toDateObject(daily.date));\n      });\n      const graphData = {\n        x: dates,\n        y: dailyValuesOrdinate,\n        type: \"scatter\",\n        yaxis: \"y\".concat(this.plotGraphData.length === 0 ? \"\" : (this.plotGraphData.length + 1).toString()),\n        name: graphTitle\n      };\n      console.log(graphData);\n      this.plotGraphData = this.dataGraph;\n      this.plotGraphData.push(graphData);\n      this.dataGraph = this.plotGraphData;\n      console.log(\"Number of graph in my list \" + this.plotGraphData.length);\n      dates = [];\n      dailyValuesOrdinate = [];\n    };\n\n    this.manageOption = obj => {\n      switch (this.option) {\n        case \"close\":\n          return obj.close;\n\n        case \"high\":\n          return obj.high;\n\n        case \"low\":\n          return obj.low;\n\n        case \"volume\":\n          return obj.volume;\n\n        case \"open\":\n          return obj.open;\n\n        default:\n          return obj.close;\n      }\n    };\n\n    this.process = (prom, graphTitle) => {\n      let dailyValues = [];\n      prom.then(data => {\n        var _this$stockEvents;\n\n        this.stockEvents = data;\n        console.log((_this$stockEvents = this.stockEvents) === null || _this$stockEvents === void 0 ? void 0 : _this$stockEvents.length);\n        console.log(this.stockEvents);\n        this.stockEvents.forEach(stocky => {\n          let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close\n          };\n          dailyValues.push(dailyExchangeObj);\n        });\n        this.populateGraphValue(dailyValues, graphTitle);\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n    };\n\n    this.handleSelection = eventData => {\n      let x = [];\n      let y = [];\n      eventData.points.forEach(pt => {\n        x.push(pt.x);\n        y.push(pt.y);\n        console.log(\"x: \" + x);\n      });\n      this.xValues = x;\n      console.log(x);\n      console.log(y);\n      return alert(\"Values Displayed\");\n    };\n\n    this.toDateObject = dateString => {\n      const temp = dateString.split(\"-\");\n      const date = new Date();\n      date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n      return date;\n    };\n\n    this.handleChange = event => {\n      const linkvalue = event.target.value;\n      this.setState({\n        value: event.target.value\n      });\n      this.value = linkvalue;\n      this.extension = \"/visual/\" + this.company + \"/\" + linkvalue.toLowerCase();\n      console.log(this.extension);\n    };\n\n    this.company = this.props.match.params.company;\n    this.option = this.props.match.params.option;\n    this.isVolume = this.value === \"Volume\";\n    this.companyList = this.company.split(\"+\").filter(elm => elm !== \"\");\n    const fetching = (_companies$companies$ = companies.companies.find(comp => comp.company === this.company)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n    console.log(\"we are fetching: \" + fetching);\n    const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.company === this.company)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n    this.GraphTitle = (companyName === null || companyName === void 0 ? void 0 : companyName.toUpperCase()) + \" - Stock Market: (\" + this.option + \")\";\n  }\n\n  async componentDidMount() {\n    async function myFetch(toFetch) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch);\n      return Promise.resolve(response); // return response;\n    }\n\n    let myFetches = [];\n    let companiesFetched = [];\n    this.companyList.forEach(id => {\n      // companyUrl.forEach((id) => {\n      if (id !== \"\") {\n        var _companies$companies$3, _companies$companies$4;\n\n        const fetching = (_companies$companies$3 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$3 === void 0 ? void 0 : _companies$companies$3.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n        const companyName = (_companies$companies$4 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$4 === void 0 ? void 0 : _companies$companies$4.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches).then(files => {\n      files.forEach(file => {\n        this.process(file.json(), String(companiesFetched.pop()));\n      });\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n    this.value = this.option;\n    this.trigger = false;\n    this.setState({\n      loading: false\n    });\n  }\n\n  render() {\n    // const { this.props , {},  } = this.state\n    // const isLoading = this.props.isLoading\n    // const bugs = this.bugStore.bugs\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        alignItems: \"center\",\n        margin: \"12\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/home\",\n          type: \"button\",\n          children: \"Go to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.value,\n            onChange: this.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Close\",\n              children: \"Select from Menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Open\",\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Volume\",\n              children: \"Volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Close\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"High\",\n              children: \"High\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Low\",\n              children: \"Low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: this.extension,\n          children: \" Visualize \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          onClick: this.handleSelection,\n          data: this.dataGraph,\n          layout: {\n            width: 1200,\n            // height: 600,\n            title: \"Double Y Axis Example\",\n            yaxis: this.yaxis,\n            yaxis2: this.yaxis3,\n            yaxis3: this.yaxis4,\n            yaxis4: this.yaxis4\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.companyList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.xValues\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SelectedPoint, {\n            company: this.companyList,\n            dates: this.xValues\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MultiGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/classes/MultiGraph/index.tsx"],"names":["React","companies","Link","Plotly","createPlotlyComponent","SelectedPoint","Plot","MultiGraph","Component","constructor","props","company","option","dailyValues","dailyValuesOrdinate","dates","fetchUrl","trigger","extension","value","xx","yy","isVolume","startDate","Date","endDate","GraphTitle","companyList","dataGraph","plotGraphData","xValues","stockEvents","state","loading","yaxis","title","titlefont","color","tickfont","yaxis2","anchor","overlaying","side","position","yaxis3","yaxis4","populateGraphValue","dailyValuesList","graphTitle","console","log","forEach","daily","push","manageOption","toDateObject","date","graphData","x","y","type","concat","length","toString","name","obj","close","high","low","volume","open","process","prom","then","data","stocky","tempString","JSON","stringify","parse","dailyExchangeObj","High","Low","Open","Volume","Close","catch","err","handleSelection","eventData","points","pt","alert","dateString","temp","split","setFullYear","parseInt","handleChange","event","linkvalue","target","setState","toLowerCase","match","params","filter","elm","fetching","find","comp","JsonUrl","companyName","toUpperCase","componentDidMount","myFetch","toFetch","response","fetch","Promise","resolve","myFetches","companiesFetched","id","String","reverse","all","files","file","json","pop","render","alignItems","margin","width"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport SelectedPoint from \"../../pages/Components/SelectedPoint\";\nconst Plot = createPlotlyComponent(Plotly);\n\nexport interface MultiGraphProps\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\ntype DailyExchange = {\n  date: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  adjClose?: number;\n  volume: number;\n};\n\ntype PlotGraph = {\n  x: any[];\n  y: any[];\n  type: string;\n  mode?: string;\n  name?: string;\n  yaxis: string;\n};\n\nclass MultiGraph extends React.Component<MultiGraphProps> {\n  private company: string;\n  private option: string;\n\n  dailyValues: DailyExchange[] = [];\n  dailyValuesOrdinate: number[] = [];\n  dates: Date[] = [];\n  //   const defaultStartDate: Date = new Date(2000, 0, 0);\n  //   const defaultEndDate: Date = new Date();\n\n  fetchUrl: any;\n  trigger: boolean = true;\n  extension: string = \"\";\n  value: string = \"Close\";\n  xx: Date[] = [];\n  yy: number[] = [];\n  isVolume: boolean;\n  startDate: Date = new Date(2000, 0, 0);\n  endDate: Date = new Date();\n  GraphTitle: string;\n  companyList: string[];\n  dataGraph: any[] = [];\n  plotGraphData: any[] = [];\n  xValues: string[] = [];\n  stockEvents: any[] = [];\n\n  state = {\n    loading: true,\n  };\n\n  yaxis = {\n    title: \"yaxis title\",\n    titlefont: { color: \"#1f77b4\" },\n    tickfont: { color: \"#1f77b4\" },\n  };\n\n  yaxis2 = {\n    title: \"yaxis2 title\",\n    titlefont: { color: \"#ff7f0e\" },\n    tickfont: { color: \"#ff7f0e\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"left\",\n    position: 0.15,\n  };\n  yaxis3 = {\n    title: \"yaxis4 title\",\n    titlefont: { color: \"#d62728\" },\n    tickfont: { color: \"#d62728\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n  };\n  yaxis4 = {\n    title: \"yaxis5 title\",\n    titlefont: { color: \"#9467bd\" },\n    tickfont: { color: \"#9467bd\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n    position: 0.85,\n  };\n\n  constructor(props: MultiGraphProps) {\n    super(props);\n    this.company = this.props.match.params.company;\n    this.option = this.props.match.params.option;\n    this.isVolume = this.value === \"Volume\";\n    this.companyList = this.company.split(\"+\").filter((elm) => elm !== \"\");\n    const fetching = companies.companies.find(\n      (comp) => comp.company === this.company\n    )?.JsonUrl;\n    console.log(\"we are fetching: \" + fetching);\n\n    const companyName = companies.companies.find(\n      (comp) => comp.company === this.company\n    )?.name;\n\n    this.GraphTitle =\n      companyName?.toUpperCase() + \" - Stock Market: (\" + this.option + \")\";\n  }\n\n  populateGraphValue = (dailyValuesList: any[], graphTitle: string) => {\n    let dailyValuesOrdinate: number[] = [];\n    let dates: Date[] = [];\n\n    console.log(dailyValuesList);\n    dailyValuesList.forEach((daily) => {\n      dailyValuesOrdinate.push(this.manageOption(daily));\n      dates.push(this.toDateObject(daily.date));\n    });\n\n    const graphData: PlotGraph = {\n      x: dates,\n      y: dailyValuesOrdinate,\n      type: \"scatter\",\n      yaxis: \"y\".concat(\n        this.plotGraphData.length === 0\n          ? \"\"\n          : (this.plotGraphData.length + 1).toString()\n      ),\n      name: graphTitle,\n    };\n    console.log(graphData);\n    this.plotGraphData = this.dataGraph;\n    this.plotGraphData.push(graphData);\n    this.dataGraph = this.plotGraphData;\n    console.log(\"Number of graph in my list \" + this.plotGraphData.length);\n    dates = [];\n    dailyValuesOrdinate = [];\n  };\n\n  manageOption = (obj: DailyExchange): number => {\n    switch (this.option) {\n      case \"close\":\n        return obj.close;\n      case \"high\":\n        return obj.high;\n      case \"low\":\n        return obj.low;\n      case \"volume\":\n        return obj.volume;\n      case \"open\":\n        return obj.open;\n      default:\n        return obj.close;\n    }\n  };\n\n  process = (prom, graphTitle: string) => {\n    let dailyValues: DailyExchange[] = [];\n    prom\n      .then((data) => {\n        this.stockEvents = data;\n        console.log(this.stockEvents?.length);\n        console.log(this.stockEvents);\n        this.stockEvents.forEach((stocky) => {\n          let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj: DailyExchange = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close,\n          };\n          dailyValues.push(dailyExchangeObj);\n        });\n        this.populateGraphValue(dailyValues, graphTitle);\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n  };\n\n  private handleSelection = (eventData) => {\n    let x: any[] = [];\n    let y: any[] = [];\n    eventData.points.forEach((pt) => {\n      x.push(pt.x);\n      y.push(pt.y);\n      console.log(\"x: \" + x);\n    });\n\n    this.xValues = x;\n    console.log(x);\n    console.log(y);\n    return alert(\"Values Displayed\");\n  };\n\n  private toDateObject = (dateString: string): Date => {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  };\n\n  private handleChange = (event) => {\n    const linkvalue: string = event.target.value;\n    this.setState({ value: event.target.value });\n    this.value = linkvalue;\n    this.extension = \"/visual/\" + this.company + \"/\" + linkvalue.toLowerCase();\n    console.log(this.extension);\n  };\n\n  async componentDidMount() {\n    async function myFetch(toFetch: string) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch);\n      return Promise.resolve(response);\n      // return response;\n    }\n    let myFetches: any[] = [];\n    let companiesFetched: string[] = [];\n\n    this.companyList.forEach((id) => {\n      // companyUrl.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach((file) => {\n          this.process(file.json(), String(companiesFetched.pop()));\n        });\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n    this.value = this.option;\n    this.trigger = false;\n\n    this.setState({ loading: false });\n  }\n\n  public render() {\n    // const { this.props , {},  } = this.state\n    // const isLoading = this.props.isLoading\n    // const bugs = this.bugStore.bugs\n\n    return (\n      <div style={{ alignItems: \"center\", margin: \"12\" }}>\n        <div>\n          <Link to={\"/home\"} type=\"button\">\n            Go to Home\n          </Link>\n        </div>\n        <div>\n          <label>\n            Pick the chart to display:\n            <select value={this.value} onChange={this.handleChange}>\n              <option value=\"Close\">Select from Menu</option>\n              <option value=\"Open\">Open</option>\n              <option value=\"Volume\">Volume</option>\n              <option value=\"Close\">Close</option>\n              <option value=\"High\">High</option>\n              <option value=\"Low\">Low</option>\n            </select>\n          </label>\n          <a href={this.extension}> Visualize </a>\n        </div>\n        <div>\n          <Plot\n            onClick={this.handleSelection}\n            data={this.dataGraph}\n            layout={{\n              width: 1200,\n              // height: 600,\n              title: \"Double Y Axis Example\",\n              yaxis: this.yaxis,\n              yaxis2: this.yaxis3,\n              yaxis3: this.yaxis4,\n              yaxis4: this.yaxis4,\n            }}\n          />\n        </div>\n        <div>\n          <div>\n            <div>{this.companyList}</div>\n            <div>{this.xValues}</div>\n            <SelectedPoint company={this.companyList} dates={this.xValues} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MultiGraph;\n"]},"metadata":{},"sourceType":"module"}