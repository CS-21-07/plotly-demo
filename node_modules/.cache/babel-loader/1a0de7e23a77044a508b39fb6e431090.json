{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nconst CombineGraph = props => {\n  _s();\n\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n  const companyList = company.split(\"+\").filter(elm => elm !== \"\");\n  console.log(companyList);\n  const yaxis = {\n    title: \"yaxis title\",\n    titlefont: {\n      color: \"#1f77b4\"\n    },\n    tickfont: {\n      color: \"#1f77b4\"\n    }\n  };\n  const yaxis2 = {\n    title: \"yaxis2 title\",\n    titlefont: {\n      color: \"#ff7f0e\"\n    },\n    tickfont: {\n      color: \"#ff7f0e\"\n    },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"left\",\n    position: 0.15\n  };\n  const yaxis3 = {\n    title: \"yaxis4 title\",\n    titlefont: {\n      color: \"#d62728\"\n    },\n    tickfont: {\n      color: \"#d62728\"\n    },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\"\n  };\n  const yaxis4 = {\n    title: \"yaxis5 title\",\n    titlefont: {\n      color: \"#9467bd\"\n    },\n    tickfont: {\n      color: \"#9467bd\"\n    },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n    position: 0.85\n  };\n  let plotGraphData = [];\n  const [companyUrl, setCompanyUrl] = useState([]);\n  const [trigger, setTrigger] = useState(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [dataGraph, setDataGraph] = useState([]);\n\n  function toDateObject(dateString) {\n    const temp = dateString.split(\"-\");\n    const date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  useEffect(() => {\n    async function myFetch(toFetch) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch);\n      return Promise.resolve(response); // return response;\n    }\n\n    let myFetches = [];\n    let companiesFetched = [];\n    companyList.forEach(id => {\n      // companyUrl.forEach((id) => {\n      if (id !== \"\") {\n        var _companies$companies$, _companies$companies$2;\n\n        const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n        const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches).then(files => {\n      files.forEach(file => {\n        process(file.json(), String(companiesFetched.pop()));\n      });\n    }).then(() => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          alignItems: \"center\",\n          margin: \"12\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/home\",\n            type: \"button\",\n            children: \"Go to Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: value,\n              onChange: handleChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Close\",\n                children: \"Select from Menu\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Open\",\n                children: \"Open\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Volume\",\n                children: \"Volume\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Close\",\n                children: \"Close\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"High\",\n                children: \"High\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Low\",\n                children: \"Low\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: extension,\n            children: \" Visualize \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Plot, {\n            data: dataGraph,\n            layout: {\n              width: 1200,\n              // height: 600,\n              title: \"Double Y Axis Example\",\n              yaxis: yaxis,\n              yaxis2: yaxis3,\n              yaxis3: yaxis4,\n              yaxis4: yaxis4\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this);\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n    setValue(option);\n  }, []);\n\n  function populateGraphValue(dailyValuesList, graphTitle) {\n    let dailyValuesOrdinate = [];\n    let dates = [];\n    console.log(dailyValuesList);\n    dailyValuesList.forEach(daily => {\n      dailyValuesOrdinate.push(manageOption(daily));\n      dates.push(toDateObject(daily.date));\n    });\n    const graphData = {\n      x: dates,\n      y: dailyValuesOrdinate,\n      type: \"scatter\",\n      yaxis: \"y\".concat(plotGraphData.length === 0 ? \"\" : (plotGraphData.length + 1).toString()),\n      name: graphTitle\n    };\n    console.log(graphData);\n    plotGraphData = dataGraph;\n    plotGraphData.push(graphData);\n    setDataGraph(plotGraphData);\n    console.log(\"Number of graph in my list \" + plotGraphData.length);\n    dates = [];\n    dailyValuesOrdinate = [];\n  }\n\n  function manageOption(obj) {\n    switch (option) {\n      case \"close\":\n        return obj.close;\n\n      case \"high\":\n        return obj.high;\n\n      case \"low\":\n        return obj.low;\n\n      case \"volume\":\n        return obj.volume;\n\n      case \"open\":\n        return obj.open;\n\n      default:\n        return obj.close;\n    }\n  }\n\n  function process(prom, graphTitle) {\n    let dailyValues = [];\n    prom.then(data => {\n      const stockEvents = data;\n      console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n      console.log(stockEvents);\n      stockEvents.forEach(stocky => {\n        let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n        let obj = JSON.parse(tempString);\n        let dailyExchangeObj = {\n          date: obj.Date,\n          high: obj.High,\n          low: obj.Low,\n          open: obj.Open,\n          volume: obj.Volume,\n          close: obj.Close\n        };\n        dailyValues.push(dailyExchangeObj);\n      });\n      populateGraphValue(dailyValues, graphTitle);\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n  }\n\n  function handleChange(event) {\n    const linkvalue = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visualMultiple/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  } // return (\n  //   <div style={{ alignItems: \"center\", margin: \"12\" }}>\n  //     <div>\n  //       <Link to={\"/home\"} type=\"button\">\n  //         Go to Home\n  //       </Link>\n  //     </div>\n  //     <div>\n  //       <label>\n  //         Pick the chart to display:\n  //         <select value={value} onChange={handleChange}>\n  //           <option value=\"Close\">Select from Menu</option>\n  //           <option value=\"Open\">Open</option>\n  //           <option value=\"Volume\">Volume</option>\n  //           <option value=\"Close\">Close</option>\n  //           <option value=\"High\">High</option>\n  //           <option value=\"Low\">Low</option>\n  //         </select>\n  //       </label>\n  //       <a href={extension}> Visualize </a>\n  //     </div>\n  //     <div>\n  //       <Plot\n  //         data={dataGraph}\n  //         layout={{\n  //           width: 1200,\n  //           // height: 600,\n  //           title: \"Double Y Axis Example\",\n  //           yaxis: yaxis,\n  //           yaxis2: yaxis3,\n  //           yaxis3: yaxis4,\n  //           yaxis4: yaxis4,\n  //         }}\n  //       />\n  //     </div>\n  //   </div>\n  // );\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CombineGraph, \"mcTFARABg0+huTiHATiQtcEhOuA=\");\n\n_c2 = CombineGraph;\nexport default CombineGraph;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"CombineGraph\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx"],"names":["React","useState","useEffect","companies","Link","Plotly","createPlotlyComponent","Plot","CombineGraph","props","company","match","params","option","companyList","split","filter","elm","console","log","yaxis","title","titlefont","color","tickfont","yaxis2","anchor","overlaying","side","position","yaxis3","yaxis4","plotGraphData","companyUrl","setCompanyUrl","trigger","setTrigger","extension","setExtension","value","setValue","GraphTitle","setGraphTitle","dataGraph","setDataGraph","toDateObject","dateString","temp","date","Date","setFullYear","parseInt","myFetch","toFetch","response","fetch","Promise","resolve","myFetches","companiesFetched","forEach","id","fetching","find","comp","JsonUrl","companyName","name","push","String","reverse","all","then","files","file","process","json","pop","alignItems","margin","handleChange","width","catch","err","populateGraphValue","dailyValuesList","graphTitle","dailyValuesOrdinate","dates","daily","manageOption","graphData","x","y","type","concat","length","toString","obj","close","high","low","volume","open","prom","dailyValues","data","stockEvents","stocky","tempString","JSON","stringify","parse","dailyExchangeObj","High","Low","Open","Volume","Close","event","linkvalue","target","toLowerCase"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface CombineGraphPropsInterface\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst CombineGraph: React.FC<CombineGraphPropsInterface> = (\n  props: CombineGraphPropsInterface\n) => {\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n\n  const companyList: string[] = company.split(\"+\").filter((elm) => elm !== \"\");\n  console.log(companyList);\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  type PlotGraph = {\n    x: any[];\n    y: any[];\n    type: string;\n    mode?: string;\n    name?: string;\n    yaxis: string;\n  };\n\n  const yaxis = {\n    title: \"yaxis title\",\n    titlefont: { color: \"#1f77b4\" },\n    tickfont: { color: \"#1f77b4\" },\n  };\n\n  const yaxis2 = {\n    title: \"yaxis2 title\",\n    titlefont: { color: \"#ff7f0e\" },\n    tickfont: { color: \"#ff7f0e\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"left\",\n    position: 0.15,\n  };\n  const yaxis3 = {\n    title: \"yaxis4 title\",\n    titlefont: { color: \"#d62728\" },\n    tickfont: { color: \"#d62728\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n  };\n  const yaxis4 = {\n    title: \"yaxis5 title\",\n    titlefont: { color: \"#9467bd\" },\n    tickfont: { color: \"#9467bd\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n    position: 0.85,\n  };\n\n  let plotGraphData: any[] = [];\n\n  const [companyUrl, setCompanyUrl] = useState<string[]>([]);\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [dataGraph, setDataGraph] = useState<any[]>([]);\n\n  function toDateObject(dateString: string): Date {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  useEffect(() => {\n    async function myFetch(toFetch: string) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch);\n      return Promise.resolve(response);\n      // return response;\n    }\n\n    let myFetches: any[] = [];\n    let companiesFetched: string[] = [];\n\n    companyList.forEach((id) => {\n      // companyUrl.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach((file) => {\n          process(file.json(), String(companiesFetched.pop()));\n        });\n      })\n      .then(() => {\n        return (\n          <div style={{ alignItems: \"center\", margin: \"12\" }}>\n            <div>\n              <Link to={\"/home\"} type=\"button\">\n                Go to Home\n              </Link>\n            </div>\n            <div>\n              <label>\n                Pick the chart to display:\n                <select value={value} onChange={handleChange}>\n                  <option value=\"Close\">Select from Menu</option>\n                  <option value=\"Open\">Open</option>\n                  <option value=\"Volume\">Volume</option>\n                  <option value=\"Close\">Close</option>\n                  <option value=\"High\">High</option>\n                  <option value=\"Low\">Low</option>\n                </select>\n              </label>\n              <a href={extension}> Visualize </a>\n            </div>\n            <div>\n              <Plot\n                data={dataGraph}\n                layout={{\n                  width: 1200,\n                  // height: 600,\n                  title: \"Double Y Axis Example\",\n                  yaxis: yaxis,\n                  yaxis2: yaxis3,\n                  yaxis3: yaxis4,\n                  yaxis4: yaxis4,\n                }}\n              />\n            </div>\n          </div>\n        );\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n    setValue(option);\n  }, []);\n\n  function populateGraphValue(\n    dailyValuesList: any[],\n    graphTitle: string\n  ): void {\n    let dailyValuesOrdinate: number[] = [];\n    let dates: Date[] = [];\n\n    console.log(dailyValuesList);\n    dailyValuesList.forEach((daily) => {\n      dailyValuesOrdinate.push(manageOption(daily));\n      dates.push(toDateObject(daily.date));\n    });\n\n    const graphData: PlotGraph = {\n      x: dates,\n      y: dailyValuesOrdinate,\n      type: \"scatter\",\n      yaxis: \"y\".concat(\n        plotGraphData.length === 0 ? \"\" : (plotGraphData.length + 1).toString()\n      ),\n      name: graphTitle,\n    };\n    console.log(graphData);\n    plotGraphData = dataGraph;\n    plotGraphData.push(graphData);\n    setDataGraph(plotGraphData);\n    console.log(\"Number of graph in my list \" + plotGraphData.length);\n    dates = [];\n    dailyValuesOrdinate = [];\n  }\n\n  function manageOption(obj: DailyExchange): number {\n    switch (option) {\n      case \"close\":\n        return obj.close;\n      case \"high\":\n        return obj.high;\n      case \"low\":\n        return obj.low;\n      case \"volume\":\n        return obj.volume;\n      case \"open\":\n        return obj.open;\n      default:\n        return obj.close;\n    }\n  }\n\n  function process(prom, graphTitle: string) {\n    let dailyValues: DailyExchange[] = [];\n    prom\n      .then((data) => {\n        const stockEvents: any[] = data;\n        console.log(stockEvents?.length);\n        console.log(stockEvents);\n        stockEvents.forEach((stocky) => {\n          let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj: DailyExchange = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close,\n          };\n          dailyValues.push(dailyExchangeObj);\n        });\n        populateGraphValue(dailyValues, graphTitle);\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n  }\n\n  function handleChange(event) {\n    const linkvalue: string = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visualMultiple/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  // return (\n  //   <div style={{ alignItems: \"center\", margin: \"12\" }}>\n  //     <div>\n  //       <Link to={\"/home\"} type=\"button\">\n  //         Go to Home\n  //       </Link>\n  //     </div>\n  //     <div>\n  //       <label>\n  //         Pick the chart to display:\n  //         <select value={value} onChange={handleChange}>\n  //           <option value=\"Close\">Select from Menu</option>\n  //           <option value=\"Open\">Open</option>\n  //           <option value=\"Volume\">Volume</option>\n  //           <option value=\"Close\">Close</option>\n  //           <option value=\"High\">High</option>\n  //           <option value=\"Low\">Low</option>\n  //         </select>\n  //       </label>\n  //       <a href={extension}> Visualize </a>\n  //     </div>\n  //     <div>\n  //       <Plot\n  //         data={dataGraph}\n  //         layout={{\n  //           width: 1200,\n  //           // height: 600,\n  //           title: \"Double Y Axis Example\",\n  //           yaxis: yaxis,\n  //           yaxis2: yaxis3,\n  //           yaxis3: yaxis4,\n  //           yaxis4: yaxis4,\n  //         }}\n  //       />\n  //     </div>\n  //   </div>\n  // );\n  return <div style={{ alignItems: \"center\", margin: \"12\" }}></div>;\n};\n\nexport default CombineGraph;\n"]},"metadata":{},"sourceType":"module"}