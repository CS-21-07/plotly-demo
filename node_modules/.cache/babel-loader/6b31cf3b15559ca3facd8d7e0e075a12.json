{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nconst CombineGraph = props => {\n  _s();\n\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n  const companyList = company.split(\"+\").filter(elm => elm !== \"\");\n  console.log(companyList);\n  let dailyValues = [];\n  let dailyValuesOrdinate = [];\n  let dates = []; // const TEST_COMP = [\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/ffivestock.json\",\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/citrixstock.json\",\n  // ];\n  // const TEST_COMP_NAME = [\"F-5\", \"Citrix\"];\n\n  let plotGraphData = [];\n  const [fetchUrl, setfetchUrl] = useState();\n  const [trigger, setTrigger] = useState(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [dataGraph, setDataGraph] = useState([]);\n  const [xx, setxx] = useState([]);\n  const [yy, setyy] = useState([]);\n  const [whichAxes, setWhichY] = useState(0);\n  useEffect(() => {\n    async function myFetch(toFetch) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch); // return Promise.resolve(response);\n\n      return response;\n    }\n\n    let myFetches = [];\n    companyList.forEach(id => {\n      if (id !== \"\") {\n        var _companies$companies$, _companies$companies$2;\n\n        const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n        const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        setfetchUrl(fetching);\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    Promise.all(myFetches).then(files => {\n      files.forEach(file => {\n        process(file.json());\n      });\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n\n    function process(prom) {\n      dailyValues = [];\n      prom.then(data => {\n        const stockEvents = data;\n        console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n        console.log(stockEvents);\n        stockEvents.forEach(stocky => {\n          let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close\n          };\n          dailyValues.push(dailyExchangeObj);\n        });\n        populateGraphValue(dailyValues);\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n    }\n\n    setValue(option);\n\n    function populateGraphValue(dailyValuesList) {\n      console.log(dailyValuesList);\n      dailyValuesList.forEach(daily => {\n        manageOption(daily);\n        dates.push(toDateObject(daily.date));\n      }); // setxx(dates);\n      // setyy(dailyValuesOrdinate);\n      // console.log(xx);\n      // console.log(yy);\n      // dates = [];\n      // dailyValuesOrdinate = [];\n\n      let yaxe = \"y\";\n\n      if (plotGraphData.length === 0) {\n        yaxe.concat(\"\");\n      } else {\n        yaxe.concat(plotGraphData.length.toString());\n      }\n\n      let graphData = {\n        x: dates,\n        y: dailyValuesOrdinate,\n        type: \"scatter\",\n        // mode: \"lines\",\n        yaxis: \"y\".concat(plotGraphData.length == 0 ? \"\" : plotGraphData.length.toString()),\n        name: \"GraphTitle \".concat(plotGraphData.length.toString())\n      };\n      console.log(graphData);\n      plotGraphData = dataGraph;\n      plotGraphData.push(graphData);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of graph in my list \" + plotGraphData.length);\n    }\n\n    function manageOption(obj) {\n      switch (option) {\n        case \"close\":\n          dailyValuesOrdinate.push(obj.close);\n          break;\n\n        case \"high\":\n          dailyValuesOrdinate.push(obj.high);\n          break;\n\n        case \"low\":\n          dailyValuesOrdinate.push(obj.low);\n          break;\n\n        case \"volume\":\n          dailyValuesOrdinate.push(obj.volume);\n          break;\n\n        case \"open\":\n          dailyValuesOrdinate.push(obj.open);\n          break;\n\n        default:\n          dailyValuesOrdinate.push(obj.close);\n          break;\n      }\n    }\n\n    function toDateObject(dateString) {\n      const temp = dateString.split(\"-\");\n      const date = new Date();\n      date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n      return date;\n    }\n  }, [, value]);\n\n  function handleChange(event) {\n    const linkvalue = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visualMultiple/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/home\",\n        type: \"button\",\n        children: \"Go to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: value,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Select from Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Open\",\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Volume\",\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: extension,\n        children: \"Visualize \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: dataGraph // layout={{\n        //   width: 1000,\n        //   height: 600,\n        //   title: GraphTitle,\n        // }}\n        ,\n        layout: {\n          width: 1000,\n          height: 600,\n          title: \"Double Y Axis Example\",\n          yaxis: {\n            title: \"yaxis title\"\n          },\n          yaxis2: {\n            title: \"yaxis2 title\",\n            titlefont: {\n              color: \"rgb(148, 103, 189)\"\n            },\n            tickfont: {\n              color: \"rgb(148, 103, 189)\"\n            },\n            overlaying: \"y\",\n            side: \"right\"\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CombineGraph, \"8x1QK0SdSFiThhD2w8ZVSu2txyE=\");\n\n_c2 = CombineGraph;\nexport default CombineGraph;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"CombineGraph\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx"],"names":["React","useState","useEffect","companies","Link","Plotly","createPlotlyComponent","Plot","CombineGraph","props","company","match","params","option","companyList","split","filter","elm","console","log","dailyValues","dailyValuesOrdinate","dates","plotGraphData","fetchUrl","setfetchUrl","trigger","setTrigger","extension","setExtension","value","setValue","GraphTitle","setGraphTitle","dataGraph","setDataGraph","xx","setxx","yy","setyy","whichAxes","setWhichY","myFetch","toFetch","response","fetch","myFetches","forEach","id","fetching","find","comp","JsonUrl","companyName","name","push","String","Promise","all","then","files","file","process","json","catch","err","prom","data","stockEvents","length","stocky","tempString","JSON","stringify","obj","parse","dailyExchangeObj","date","Date","high","High","low","Low","open","Open","volume","Volume","close","Close","populateGraphValue","dailyValuesList","daily","manageOption","toDateObject","yaxe","concat","toString","graphData","x","y","type","yaxis","dateString","temp","setFullYear","parseInt","handleChange","event","linkvalue","target","toLowerCase","alignItems","margin","width","height","title","yaxis2","titlefont","color","tickfont","overlaying","side"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface CombineGraphPropsInterface\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst CombineGraph: React.FC<CombineGraphPropsInterface> = (\n  props: CombineGraphPropsInterface\n) => {\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n\n  const companyList: string[] = company.split(\"+\").filter((elm) => elm !== \"\");\n  console.log(companyList);\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  type Marker = {\n    color: string;\n  };\n\n  type PlotGraph = {\n    x: any[];\n    y: any[];\n    type: string;\n    mode?: string;\n    name?: string;\n    yaxis: string;\n  };\n\n  let dailyValues: DailyExchange[] = [];\n  let dailyValuesOrdinate: number[] = [];\n  let dates: Date[] = [];\n\n  // const TEST_COMP = [\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/ffivestock.json\",\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/citrixstock.json\",\n  // ];\n  // const TEST_COMP_NAME = [\"F-5\", \"Citrix\"];\n\n  let plotGraphData: any[] = [];\n\n  const [fetchUrl, setfetchUrl] = useState<any>();\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [dataGraph, setDataGraph] = useState<any[]>([]);\n  const [xx, setxx] = useState<Date[]>([]);\n  const [yy, setyy] = useState<number[]>([]);\n  const [whichAxes, setWhichY] = useState<number>(0);\n\n  useEffect(() => {\n    async function myFetch(toFetch: string) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch);\n      // return Promise.resolve(response);\n      return response;\n    }\n\n    let myFetches: any[] = [];\n\n    companyList.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        setfetchUrl(fetching);\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach((file) => {\n          process(file.json());\n        });\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n\n    function process(prom) {\n      dailyValues = [];\n      prom\n        .then((data) => {\n          const stockEvents: any[] = data;\n          console.log(stockEvents?.length);\n          console.log(stockEvents);\n          stockEvents.forEach((stocky) => {\n            let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n            let obj = JSON.parse(tempString);\n            let dailyExchangeObj: DailyExchange = {\n              date: obj.Date,\n              high: obj.High,\n              low: obj.Low,\n              open: obj.Open,\n              volume: obj.Volume,\n              close: obj.Close,\n            };\n            dailyValues.push(dailyExchangeObj);\n          });\n          populateGraphValue(dailyValues);\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n    }\n    setValue(option);\n\n    function populateGraphValue(dailyValuesList: any[]): void {\n      console.log(dailyValuesList);\n      dailyValuesList.forEach((daily) => {\n        manageOption(daily);\n        dates.push(toDateObject(daily.date));\n      });\n\n      // setxx(dates);\n      // setyy(dailyValuesOrdinate);\n      // console.log(xx);\n      // console.log(yy);\n\n      // dates = [];\n      // dailyValuesOrdinate = [];\n\n      let yaxe = \"y\";\n      if (plotGraphData.length === 0) {\n        yaxe.concat(\"\");\n      } else {\n        yaxe.concat(plotGraphData.length.toString());\n      }\n\n      let graphData: PlotGraph = {\n        x: dates,\n        y: dailyValuesOrdinate,\n        type: \"scatter\",\n        // mode: \"lines\",\n        yaxis: \"y\".concat(\n          plotGraphData.length == 0 ? \"\" : plotGraphData.length.toString()\n        ),\n        name: \"GraphTitle \".concat(plotGraphData.length.toString()),\n      };\n      console.log(graphData);\n      plotGraphData = dataGraph;\n      plotGraphData.push(graphData);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of graph in my list \" + plotGraphData.length);\n    }\n\n    function manageOption(obj: DailyExchange): void {\n      switch (option) {\n        case \"close\":\n          dailyValuesOrdinate.push(obj.close);\n          break;\n        case \"high\":\n          dailyValuesOrdinate.push(obj.high);\n          break;\n        case \"low\":\n          dailyValuesOrdinate.push(obj.low);\n          break;\n        case \"volume\":\n          dailyValuesOrdinate.push(obj.volume);\n          break;\n        case \"open\":\n          dailyValuesOrdinate.push(obj.open);\n          break;\n        default:\n          dailyValuesOrdinate.push(obj.close);\n          break;\n      }\n    }\n\n    function toDateObject(dateString: string): Date {\n      const temp: string[] = dateString.split(\"-\");\n      const date: Date = new Date();\n      date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n      return date;\n    }\n  }, [, value]);\n\n  function handleChange(event) {\n    const linkvalue: string = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visualMultiple/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12\" }}>\n      <div>\n        <Link to={\"/home\"} type=\"button\">\n          Go to Home\n        </Link>\n      </div>\n      <div>\n        <label>\n          Pick the chart to display:\n          <select value={value} onChange={handleChange}>\n            <option value=\"Close\">Select from Menu</option>\n            <option value=\"Open\">Open</option>\n            <option value=\"Volume\">Volume</option>\n            <option value=\"Close\">Close</option>\n            <option value=\"High\">High</option>\n            <option value=\"Low\">Low</option>\n          </select>\n        </label>\n        <a href={extension}>Visualize </a>\n      </div>\n      <div>\n        <Plot\n          data={dataGraph}\n          // layout={{\n          //   width: 1000,\n          //   height: 600,\n          //   title: GraphTitle,\n          // }}\n          layout={{\n            width: 1000,\n            height: 600,\n            title: \"Double Y Axis Example\",\n            yaxis: { title: \"yaxis title\" },\n            yaxis2: {\n              title: \"yaxis2 title\",\n              titlefont: { color: \"rgb(148, 103, 189)\" },\n              tickfont: { color: \"rgb(148, 103, 189)\" },\n              overlaying: \"y\",\n              side: \"right\",\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CombineGraph;\n"]},"metadata":{},"sourceType":"module"}