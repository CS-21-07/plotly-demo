{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/classes/MultiGraph/index.tsx\";\nimport React from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport \"react-datepicker/dist/react-datepicker.css\"; // npm install react-datepicker --save\n\n//npm install react-bootstrap bootstrap\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nclass MultiGraph extends React.Component {\n  //   dailyValuesOrdinate: number[] = [];\n  //   dates: Date[] = [];\n  //   const defaultStartDate: Date = new Date(2000, 0, 0);\n  //   const defaultEndDate: Date = new Date();\n  //   plotGraphData: any[] = [];\n  constructor(props) {\n    super(props);\n    this.company = void 0;\n    this.option = void 0;\n    this.dailyValues = [];\n    this.fetchUrl = void 0;\n    this.trigger = true;\n    this.extension = \"\";\n    this.value = \"Close\";\n    this.xx = [];\n    this.yy = [];\n    this.isVolume = void 0;\n    this.startDate = new Date(2000, 0, 0);\n    this.endDate = new Date();\n    this.GraphTitle = void 0;\n    this.companyList = void 0;\n    this.dataGraph = [];\n    this.xValues = [];\n    this.stockEvents = [];\n    this.state = {\n      loaded: false,\n      selected: false,\n      points: [] // xValues: string [],\n\n    };\n    this.yaxis = {\n      title: \"yaxis title\",\n      titlefont: {\n        color: \"#1f77b4\"\n      },\n      tickfont: {\n        color: \"#1f77b4\"\n      }\n    };\n    this.yaxis2 = {\n      title: \"yaxis2 title\",\n      titlefont: {\n        color: \"#ff7f0e\"\n      },\n      tickfont: {\n        color: \"#ff7f0e\"\n      },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"left\",\n      position: 0.15\n    };\n    this.yaxis3 = {\n      title: \"yaxis4 title\",\n      titlefont: {\n        color: \"#d62728\"\n      },\n      tickfont: {\n        color: \"#d62728\"\n      },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"right\"\n    };\n    this.yaxis4 = {\n      title: \"yaxis5 title\",\n      titlefont: {\n        color: \"#9467bd\"\n      },\n      tickfont: {\n        color: \"#9467bd\"\n      },\n      anchor: \"x\",\n      overlaying: \"y\",\n      side: \"right\",\n      position: 0.85\n    };\n\n    this.populateGraphValue = (dailyValuesList, graphTitle) => {\n      let dailyValuesOrdinate = [];\n      let dates = []; // console.log(dailyValuesList);\n\n      dailyValuesList.forEach(daily => {\n        dailyValuesOrdinate.push(this.manageOption(daily));\n        dates.push(this.toDateObject(daily.date));\n      });\n      const graphData = {\n        x: dates,\n        y: dailyValuesOrdinate,\n        type: \"scatter\",\n        yaxis: \"y\".concat(this.dataGraph.length === 0 ? \"\" : (this.dataGraph.length + 1).toString()),\n        name: graphTitle\n      };\n      console.log(graphData);\n      this.dataGraph.push(graphData);\n      console.log(\"Number of graph in my list \" + this.dataGraph.length); // dates = [];\n      // dailyValuesOrdinate = [];\n\n      if (this.dataGraph.length === this.companyList.length) {\n        this.setState({\n          loaded: true\n        });\n      }\n    };\n\n    this.manageOption = obj => {\n      switch (this.option) {\n        case \"close\":\n          return obj.close;\n\n        case \"high\":\n          return obj.high;\n\n        case \"low\":\n          return obj.low;\n\n        case \"volume\":\n          return obj.volume;\n\n        case \"open\":\n          return obj.open;\n\n        default:\n          return obj.close;\n      }\n    };\n\n    this.handleSelection = eventData => {\n      let x = [];\n      let y = [];\n      this.setState({\n        points: eventData.points\n      });\n      this.state.points.forEach(pt => {\n        x.push(pt.x);\n        y.push(pt.y);\n        console.log(\"x: \" + x);\n      });\n      this.xValues = x;\n      console.log(x);\n      console.log(y);\n      this.setState({\n        selected: true,\n        xValues: x\n      }); // return alert(\"Values Displayed\");\n\n      let newLink = \"/PointInfo/\" + this.company + this.xValues[0].split(\" \")[0];\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: newLink,\n        type: \"button\",\n        children: \"View Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.toDateObject = dateString => {\n      const temp = dateString.split(\"-\");\n      const date = new Date();\n      date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n      return date;\n    };\n\n    this.handleChange = event => {\n      const linkvalue = event.target.value;\n      this.setState({\n        value: event.target.value\n      });\n      this.value = linkvalue;\n      this.extension = \"/visualMultiple/\" + this.company + \"/\" + linkvalue.toLowerCase();\n      console.log(this.extension);\n    };\n\n    this.company = this.props.match.params.company;\n    this.option = this.props.match.params.option;\n    this.isVolume = this.value === \"Volume\";\n    this.companyList = this.company.split(\"+\").filter(elm => elm !== \"\");\n    this.value = this.option;\n  }\n\n  async componentDidMount() {\n    async function myFetch(toFetch) {\n      const response = await fetch(toFetch); //   return Promise.resolve(response);\n\n      return response;\n    }\n\n    let myFetches = [];\n    let companiesFetched = [];\n    this.companyList.forEach(id => {\n      // companyUrl.forEach((id) => {\n      if (id !== \"\") {\n        var _companies$companies$, _companies$companies$2;\n\n        const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n        const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches).then(files => {\n      files.forEach(async file => {\n        var _this$stockEvents;\n\n        let data = await file.json();\n        this.dailyValues = [];\n        this.stockEvents = data;\n        console.log((_this$stockEvents = this.stockEvents) === null || _this$stockEvents === void 0 ? void 0 : _this$stockEvents.length);\n        console.log(this.stockEvents);\n        this.stockEvents.forEach(stocky => {\n          let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close\n          };\n          this.dailyValues.push(dailyExchangeObj);\n        });\n        this.populateGraphValue(this.dailyValues, String(companiesFetched.pop()));\n      });\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n  }\n\n  render() {\n    // const { this.props , {},  } = this.state\n    // const isLoading = this.props.isLoading\n    // const bugs = this.bugStore.bugs\n    return this.state.loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        alignItems: \"center\",\n        margin: \"12\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/home\",\n          type: \"button\",\n          children: \"Go to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.value,\n            onChange: this.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Close\",\n              children: \"Select from Menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Open\",\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Volume\",\n              children: \"Volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Close\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"High\",\n              children: \"High\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Low\",\n              children: \"Low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: this.extension,\n          children: \" Visualize \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Plot, {\n          onClick: this.handleSelection,\n          data: this.dataGraph,\n          layout: {\n            width: 1200,\n            // height: 600,\n            title: \"Double Y Axis Example\",\n            yaxis: this.yaxis,\n            yaxis2: this.yaxis3,\n            yaxis3: this.yaxis4,\n            yaxis4: this.yaxis4\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.selected ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.companyList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.xValues\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Nothing is selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MultiGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/classes/MultiGraph/index.tsx"],"names":["React","companies","Link","Plotly","createPlotlyComponent","Plot","MultiGraph","Component","constructor","props","company","option","dailyValues","fetchUrl","trigger","extension","value","xx","yy","isVolume","startDate","Date","endDate","GraphTitle","companyList","dataGraph","xValues","stockEvents","state","loaded","selected","points","yaxis","title","titlefont","color","tickfont","yaxis2","anchor","overlaying","side","position","yaxis3","yaxis4","populateGraphValue","dailyValuesList","graphTitle","dailyValuesOrdinate","dates","forEach","daily","push","manageOption","toDateObject","date","graphData","x","y","type","concat","length","toString","name","console","log","setState","obj","close","high","low","volume","open","handleSelection","eventData","pt","newLink","split","dateString","temp","setFullYear","parseInt","handleChange","event","linkvalue","target","toLowerCase","match","params","filter","elm","componentDidMount","myFetch","toFetch","response","fetch","myFetches","companiesFetched","id","fetching","find","comp","JsonUrl","companyName","String","reverse","Promise","all","then","files","file","data","json","stocky","tempString","JSON","stringify","parse","dailyExchangeObj","High","Low","Open","Volume","Close","pop","catch","err","render","alignItems","margin","width"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport SelectedPoint from \"../SelectedPoint\";\nconst Plot = createPlotlyComponent(Plotly);\n\nexport interface MultiGraphProps\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\ntype DailyExchange = {\n  date: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  adjClose?: number;\n  volume: number;\n};\n\ntype PlotGraph = {\n  x: any[];\n  y: any[];\n  type: string;\n  mode?: string;\n  name?: string;\n  yaxis: string;\n};\n\nclass MultiGraph extends React.Component<MultiGraphProps> {\n  private company: string;\n  private option: string;\n\n  dailyValues: DailyExchange[] = [];\n  //   dailyValuesOrdinate: number[] = [];\n  //   dates: Date[] = [];\n  //   const defaultStartDate: Date = new Date(2000, 0, 0);\n  //   const defaultEndDate: Date = new Date();\n\n  fetchUrl: any;\n  trigger: boolean = true;\n  extension: string = \"\";\n  value: string = \"Close\";\n  xx: Date[] = [];\n  yy: number[] = [];\n  isVolume: boolean;\n  startDate: Date = new Date(2000, 0, 0);\n  endDate: Date = new Date();\n  GraphTitle: string;\n  companyList: string[];\n  dataGraph: any[] = [];\n  //   plotGraphData: any[] = [];\n  xValues: string[] = [];\n  stockEvents: any[] = [];\n\n  state = {\n    loaded: false,\n    selected: false,\n    points: [],\n    // xValues: string [],\n  };\n\n  yaxis = {\n    title: \"yaxis title\",\n    titlefont: { color: \"#1f77b4\" },\n    tickfont: { color: \"#1f77b4\" },\n  };\n\n  yaxis2 = {\n    title: \"yaxis2 title\",\n    titlefont: { color: \"#ff7f0e\" },\n    tickfont: { color: \"#ff7f0e\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"left\",\n    position: 0.15,\n  };\n  yaxis3 = {\n    title: \"yaxis4 title\",\n    titlefont: { color: \"#d62728\" },\n    tickfont: { color: \"#d62728\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n  };\n  yaxis4 = {\n    title: \"yaxis5 title\",\n    titlefont: { color: \"#9467bd\" },\n    tickfont: { color: \"#9467bd\" },\n    anchor: \"x\",\n    overlaying: \"y\",\n    side: \"right\",\n    position: 0.85,\n  };\n\n  constructor(props: MultiGraphProps) {\n    super(props);\n    this.company = this.props.match.params.company;\n    this.option = this.props.match.params.option;\n    this.isVolume = this.value === \"Volume\";\n    this.companyList = this.company.split(\"+\").filter((elm) => elm !== \"\");\n    this.value = this.option;\n  }\n\n  populateGraphValue = (dailyValuesList: any[], graphTitle: string) => {\n    let dailyValuesOrdinate: number[] = [];\n    let dates: Date[] = [];\n\n    // console.log(dailyValuesList);\n    dailyValuesList.forEach((daily) => {\n      dailyValuesOrdinate.push(this.manageOption(daily));\n      dates.push(this.toDateObject(daily.date));\n    });\n\n    const graphData: PlotGraph = {\n      x: dates,\n      y: dailyValuesOrdinate,\n      type: \"scatter\",\n      yaxis: \"y\".concat(\n        this.dataGraph.length === 0\n          ? \"\"\n          : (this.dataGraph.length + 1).toString()\n      ),\n      name: graphTitle,\n    };\n    console.log(graphData);\n    this.dataGraph.push(graphData);\n    console.log(\"Number of graph in my list \" + this.dataGraph.length);\n    // dates = [];\n    // dailyValuesOrdinate = [];\n    if (this.dataGraph.length === this.companyList.length) {\n      this.setState({ loaded: true });\n    }\n  };\n\n  manageOption = (obj: DailyExchange): number => {\n    switch (this.option) {\n      case \"close\":\n        return obj.close;\n      case \"high\":\n        return obj.high;\n      case \"low\":\n        return obj.low;\n      case \"volume\":\n        return obj.volume;\n      case \"open\":\n        return obj.open;\n      default:\n        return obj.close;\n    }\n  };\n\n  private handleSelection = (eventData) => {\n    let x: any[] = [];\n    let y: any[] = [];\n    this.setState({ points: eventData.points });\n    this.state.points.forEach((pt: any) => {\n      x.push(pt.x);\n      y.push(pt.y);\n      console.log(\"x: \" + x);\n    });\n\n    this.xValues = x;\n    console.log(x);\n    console.log(y);\n    this.setState({ selected: true, xValues: x });\n    // return alert(\"Values Displayed\");\n    let newLink = \"/PointInfo/\" + this.company + this.xValues[0].split(\" \")[0];\n    return (\n      <Link to={newLink} type=\"button\">\n        View Data\n      </Link>\n    );\n  };\n\n  private toDateObject = (dateString: string): Date => {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  };\n\n  private handleChange = (event) => {\n    const linkvalue: string = event.target.value;\n    this.setState({ value: event.target.value });\n    this.value = linkvalue;\n    this.extension =\n      \"/visualMultiple/\" + this.company + \"/\" + linkvalue.toLowerCase();\n    console.log(this.extension);\n  };\n\n  async componentDidMount() {\n    async function myFetch(toFetch: string) {\n      const response = await fetch(toFetch);\n      //   return Promise.resolve(response);\n      return response;\n    }\n    let myFetches: any[] = [];\n    let companiesFetched: string[] = [];\n\n    this.companyList.forEach((id) => {\n      // companyUrl.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n\n    companiesFetched.reverse();\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach(async (file) => {\n          let data = await file.json();\n          this.dailyValues = [];\n          this.stockEvents = data;\n          console.log(this.stockEvents?.length);\n          console.log(this.stockEvents);\n          this.stockEvents.forEach((stocky) => {\n            let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n            let obj = JSON.parse(tempString);\n            let dailyExchangeObj: DailyExchange = {\n              date: obj.Date,\n              high: obj.High,\n              low: obj.Low,\n              open: obj.Open,\n              volume: obj.Volume,\n              close: obj.Close,\n            };\n            this.dailyValues.push(dailyExchangeObj);\n          });\n          this.populateGraphValue(\n            this.dailyValues,\n            String(companiesFetched.pop())\n          );\n        });\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n  }\n\n  public render() {\n    // const { this.props , {},  } = this.state\n    // const isLoading = this.props.isLoading\n    // const bugs = this.bugStore.bugs\n\n    return this.state.loaded ? (\n      <div style={{ alignItems: \"center\", margin: \"12\" }}>\n        <div>\n          <Link to={\"/home\"} type=\"button\">\n            Go to Home\n          </Link>\n        </div>\n        <div>\n          <label>\n            Pick the chart to display:\n            <select value={this.value} onChange={this.handleChange}>\n              <option value=\"Close\">Select from Menu</option>\n              <option value=\"Open\">Open</option>\n              <option value=\"Volume\">Volume</option>\n              <option value=\"Close\">Close</option>\n              <option value=\"High\">High</option>\n              <option value=\"Low\">Low</option>\n            </select>\n          </label>\n          <a href={this.extension}> Visualize </a>\n        </div>\n        <div>\n          <Plot\n            onClick={this.handleSelection}\n            data={this.dataGraph}\n            layout={{\n              width: 1200,\n              // height: 600,\n              title: \"Double Y Axis Example\",\n              yaxis: this.yaxis,\n              yaxis2: this.yaxis3,\n              yaxis3: this.yaxis4,\n              yaxis4: this.yaxis4,\n            }}\n          />\n        </div>\n        <div>\n          {this.state.selected ? (\n            <div>\n              <div>{this.companyList}</div>\n              <div>{this.xValues}</div>\n              {/* <SelectedPoint\n                companies={this.company}\n                dates={this.xValues[0].split(\" \")[0]}\n              /> */}\n            </div>\n          ) : (\n            <div>\n              <h2>Nothing is selected</h2>\n            </div>\n          )}\n        </div>\n      </div>\n    ) : (\n      <div>loading...</div>\n    );\n  }\n}\n\nexport default MultiGraph;\n"]},"metadata":{},"sourceType":"module"}