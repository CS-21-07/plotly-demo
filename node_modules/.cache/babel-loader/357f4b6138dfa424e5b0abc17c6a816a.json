{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\n\nconst CombineGraph = props => {\n  _s();\n\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n  const companyList = company.split(\"%\");\n  let dailyValues = [];\n  let dailyValuesOrdinate = [];\n  let dates = [];\n  const plotGraphData = [];\n  const [fetchUrl, setfetchUrl] = useState();\n  const [trigger, setTrigger] = useState(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [xx, setxx] = useState([]);\n  const [yy, setyy] = useState([]);\n  useEffect(() => {\n    async function data() {\n      const response = await fetch(fetchUrl).then(function (response) {\n        console.log(\"Successful fetch\");\n        return response.json();\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n      return Promise.resolve(response);\n    }\n\n    for (let i = 0; i < companyList.length; i++) {\n      var _companies$companies$, _companies$companies$2;\n\n      dailyValues = [];\n      dailyValuesOrdinate = [];\n      dates = [];\n      const fetching = (_companies$companies$ = companies.companies.find(comp => comp.company === companyList[i])) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n      console.log(\"we are fetching: \" + fetching);\n      const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.company === companyList[i])) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n      const graphTitle = (companyName === null || companyName === void 0 ? void 0 : companyName.toUpperCase()) + \" - Stock Market: (\" + option + \")\";\n      setGraphTitle(graphTitle);\n      setfetchUrl(fetching);\n      data().then(response => {\n        const stockEvents = response;\n        console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n        console.log(stockEvents);\n\n        for (let i = 0; i < (stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length); i++) {\n          // let obj: DailyExchange = stockEvents[i]; //extract(stockEvents[i]);\n          let tempString = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close\n          };\n          dailyValues.push(dailyExchangeObj);\n        }\n\n        populateGraphValue();\n      });\n      setValue(option);\n    }\n  }, []);\n\n  function populateGraphValue() {\n    for (let i = 0; i < dailyValues.length; i++) {\n      manageOption(dailyValues[i]);\n      dates.push(toDateObject(dailyValues[i].date));\n    }\n\n    setxx(dates);\n    setyy(dailyValuesOrdinate);\n    let graphData = {\n      x: xx,\n      y: yy,\n      type: \"scatter\",\n      mode: \"lines\",\n      marker: {\n        color: \"red\"\n      }\n    };\n    plotGraphData.push(graphData);\n  }\n\n  function manageOption(obj) {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        break;\n\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function toDateObject(dateString) {\n    const temp = dateString.split(\"-\");\n    const date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleChange(event) {\n    const linkvalue = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/home\",\n        type: \"button\",\n        children: \"Go to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: value,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Select from Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Open\",\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Volume\",\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: extension,\n        children: \"Visualize \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: trigger ? /*#__PURE__*/_jsxDEV(Plot, {\n        data: plotGraphData,\n        layout: {\n          width: 1000,\n          height: 600,\n          title: GraphTitle\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Error in loading the chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CombineGraph, \"7Ma+XngtfX/eGn8NHZHlI8lWWmM=\");\n\n_c = CombineGraph;\nexport default CombineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"CombineGraph\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx"],"names":["React","useState","useEffect","Plot","companies","Link","CombineGraph","props","company","match","params","option","companyList","split","dailyValues","dailyValuesOrdinate","dates","plotGraphData","fetchUrl","setfetchUrl","trigger","setTrigger","extension","setExtension","value","setValue","GraphTitle","setGraphTitle","xx","setxx","yy","setyy","data","response","fetch","then","console","log","json","catch","err","Promise","resolve","i","length","fetching","find","comp","JsonUrl","companyName","name","graphTitle","toUpperCase","stockEvents","tempString","JSON","stringify","obj","parse","dailyExchangeObj","date","Date","high","High","low","Low","open","Open","volume","Volume","close","Close","push","populateGraphValue","manageOption","toDateObject","graphData","x","y","type","mode","marker","color","dateString","temp","setFullYear","parseInt","handleChange","event","linkvalue","target","toLowerCase","alignItems","margin","width","height","title"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\n\ninterface CombineGraphPropsInterface\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst CombineGraph: React.FC<CombineGraphPropsInterface> = (\n  props: CombineGraphPropsInterface\n) => {\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n\n  const companyList: string[] = company.split(\"%\");\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  type Marker = {\n    color: string;\n  };\n\n  type PlotGraph = {\n    x: any[];\n    y: any[];\n    type: string;\n    mode?: string;\n    marker: Marker;\n  };\n\n  let dailyValues: DailyExchange[] = [];\n  let dailyValuesOrdinate: number[] = [];\n  let dates: Date[] = [];\n\n  const plotGraphData: any[] = [];\n\n  const [fetchUrl, setfetchUrl] = useState<any>();\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [xx, setxx] = useState<Date[]>([]);\n  const [yy, setyy] = useState<number[]>([]);\n\n  useEffect(() => {\n    async function data(): Promise<any[]> {\n      const response = await fetch(fetchUrl)\n        .then(function (response: any) {\n          console.log(\"Successful fetch\");\n          return response.json();\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n      return Promise.resolve(response);\n    }\n\n    for (let i = 0; i < companyList.length; i++) {\n      dailyValues = [];\n      dailyValuesOrdinate = [];\n      dates = [];\n\n      const fetching = companies.companies.find(\n        (comp) => comp.company === companyList[i]\n      )?.JsonUrl;\n      console.log(\"we are fetching: \" + fetching);\n\n      const companyName = companies.companies.find(\n        (comp) => comp.company === companyList[i]\n      )?.name;\n\n      const graphTitle: string =\n        companyName?.toUpperCase() + \" - Stock Market: (\" + option + \")\";\n      setGraphTitle(graphTitle);\n\n      setfetchUrl(fetching);\n      data().then((response) => {\n        const stockEvents: any[] = response;\n        console.log(stockEvents?.length);\n        console.log(stockEvents);\n        for (let i: number = 0; i < stockEvents?.length; i++) {\n          // let obj: DailyExchange = stockEvents[i]; //extract(stockEvents[i]);\n          let tempString: string = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj: DailyExchange = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close,\n          };\n          dailyValues.push(dailyExchangeObj);\n        }\n        populateGraphValue();\n      });\n      setValue(option);\n    }\n  }, []);\n\n  function populateGraphValue(): void {\n    for (let i = 0; i < dailyValues.length; i++) {\n      manageOption(dailyValues[i]);\n      dates.push(toDateObject(dailyValues[i].date));\n    }\n    setxx(dates);\n    setyy(dailyValuesOrdinate);\n\n    let graphData = {\n      x: xx,\n      y: yy,\n      type: \"scatter\",\n      mode: \"lines\",\n      marker: { color: \"red\" },\n    };\n\n    plotGraphData.push(graphData);\n  }\n\n  function manageOption(obj: DailyExchange): void {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        break;\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function toDateObject(dateString: string): Date {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleChange(event) {\n    const linkvalue: string = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12\" }}>\n      <div>\n        <Link to={\"/home\"} type=\"button\">\n          Go to Home\n        </Link>\n      </div>\n      <div>\n        <label>\n          Pick the chart to display:\n          <select value={value} onChange={handleChange}>\n            <option value=\"Close\">Select from Menu</option>\n            <option value=\"Open\">Open</option>\n            <option value=\"Volume\">Volume</option>\n            <option value=\"Close\">Close</option>\n            <option value=\"High\">High</option>\n            <option value=\"Low\">Low</option>\n          </select>\n        </label>\n        <a href={extension}>Visualize </a>\n      </div>\n      <div>\n        {trigger ? (\n          <Plot\n            data={plotGraphData}\n            layout={{\n              width: 1000,\n              height: 600,\n              title: GraphTitle,\n            }}\n          />\n        ) : (\n          <div>Error in loading the chart</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CombineGraph;\n"]},"metadata":{},"sourceType":"module"}