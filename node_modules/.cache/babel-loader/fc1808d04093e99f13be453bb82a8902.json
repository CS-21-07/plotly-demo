{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/Extraction/XmlToJson/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\"; //npm install raw-loader --save-dev\n\nconst XmlToJson = props => {\n  _s();\n\n  console.log(\"RRD tool extraction\");\n  const [xmltest, setxml] = useState(\"\");\n  const [json, setJson] = useState(\"\");\n  /*\tThis work is licensed under Creative Commons GNU LGPL License.\n  License: http://creativecommons.org/licenses/LGPL/2.1/\n   Version: 0.9\n  Author:  Stefan Goessner/2006\n  Web:     http://goessner.net/ \n  */\n\n  useEffect(() => {\n    function xml2json(xml, tab) {\n      let X = {\n        toObj: function (xml) {\n          let o = {};\n          console.log(\"THIS: \" + xml.nodeType);\n\n          if (xml.nodeType === 1) {\n            // element node ..\n            if (xml.attributes.length) // element with attributes  ..\n              for (let i = 0; i < xml.attributes.length; i++) o[\"@\" + xml.attributes[i].nodeName] = (xml.attributes[i].nodeValue || \"\").toString();\n\n            if (xml.firstChild) {\n              // element has child nodes ..\n              let textChild = 0,\n                  cdataChild = 0,\n                  hasElementChild = false;\n\n              for (let n = xml.firstChild; n; n = n.nextSibling) {\n                if (n.nodeType === 1) hasElementChild = true;else if (n.nodeType === 3 && n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) textChild++; // non-whitespace text\n                else if (n.nodeType === 4) cdataChild++; // cdata section node\n              }\n\n              if (hasElementChild) {\n                if (textChild < 2 && cdataChild < 2) {\n                  // structured element with evtl. a single text or/and cdata node ..\n                  X.removeWhite(xml);\n\n                  for (var n = xml.firstChild; n; n = n.nextSibling) {\n                    if (n.nodeType === 3) // text node\n                      o[\"#text\"] = X.escape(n.nodeValue);else if (n.nodeType === 4) // cdata node\n                      o[\"#cdata\"] = X.escape(n.nodeValue);else if (o[n.nodeName]) {\n                      // multiple occurence of element ..\n                      if (o[n.nodeName] instanceof Array) o[n.nodeName][o[n.nodeName].length] = X.toObj(n);else o[n.nodeName] = [o[n.nodeName], X.toObj(n)];\n                    } // first occurence of element..\n                    else o[n.nodeName] = X.toObj(n);\n                  }\n                } else {\n                  // mixed content\n                  if (!xml.attributes.length) o = X.escape(X.innerXml(xml));else o[\"#text\"] = X.escape(X.innerXml(xml));\n                }\n              } else if (textChild) {\n                // pure text\n                if (!xml.attributes.length) o = X.escape(X.innerXml(xml));else o[\"#text\"] = X.escape(X.innerXml(xml));\n              } else if (cdataChild) {\n                // cdata\n                if (cdataChild > 1) o = X.escape(X.innerXml(xml));else for (var n = xml.firstChild; n; n = n.nextSibling) o[\"#cdata\"] = X.escape(n.nodeValue);\n              }\n            }\n\n            if (!xml.attributes.length && !xml.firstChild) o = null;\n          } else if (xml.nodeType === 9) {\n            // document.node\n            o = X.toObj(xml.documentElement);\n          } else alert(\"unhandled node type: \" + xml.nodeType);\n\n          return o;\n        },\n        toJson: function (o, name, ind) {\n          var json = name ? '\"' + name + '\"' : \"\";\n\n          if (o instanceof Array) {\n            for (var i = 0, n = o.length; i < n; i++) o[i] = X.toJson(o[i], \"\", ind + \"\\t\");\n\n            json += (name ? \":[\" : \"[\") + (o.length > 1 ? \"\\n\" + ind + \"\\t\" + o.join(\",\\n\" + ind + \"\\t\") + \"\\n\" + ind : o.join(\"\")) + \"]\";\n          } else if (o === null) json += (name && \":\") + \"null\";else if (typeof o == \"object\") {\n            let arr = [];\n\n            for (var m in o) arr[arr.length] = X.toJson(o[m], m, ind + \"\\t\");\n\n            json += (name ? \":{\" : \"{\") + (arr.length > 1 ? \"\\n\" + ind + \"\\t\" + arr.join(\",\\n\" + ind + \"\\t\") + \"\\n\" + ind : arr.join(\"\")) + \"}\";\n          } else if (typeof o === \"string\") json += (name && \":\") + '\"' + o.toString() + '\"';else json += (name && \":\") + o.toString();\n\n          return json;\n        },\n        innerXml: function (node) {\n          var s = \"\";\n          if (\"innerHTML\" in node) s = node.innerHTML;else {\n            var asXml = function (n) {\n              var s = \"\";\n\n              if (n.nodeType === 1) {\n                s += \"<\" + n.nodeName;\n\n                for (var i = 0; i < n.attributes.length; i++) s += \" \" + n.attributes[i].nodeName + '=\"' + (n.attributes[i].nodeValue || \"\").toString() + '\"';\n\n                if (n.firstChild) {\n                  s += \">\";\n\n                  for (var c = n.firstChild; c; c = c.nextSibling) s += asXml(c);\n\n                  s += \"</\" + n.nodeName + \">\";\n                } else s += \"/>\";\n              } else if (n.nodeType === 3) s += n.nodeValue;else if (n.nodeType === 4) s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\n\n              return s;\n            };\n\n            for (var c = node.firstChild; c; c = c.nextSibling) s += asXml(c);\n          }\n          return s;\n        },\n        escape: function (txt) {\n          return txt.replace(/[\\\\]/g, \"\\\\\\\\\").replace(/[\\\"]/g, '\\\\\"').replace(/[\\n]/g, \"\\\\n\").replace(/[\\r]/g, \"\\\\r\");\n        },\n        removeWhite: function (e) {\n          e.normalize();\n\n          for (var n = e.firstChild; n;) {\n            if (n.nodeType === 3) {\n              // text node\n              if (!n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) {\n                // pure whitespace text node\n                var nxt = n.nextSibling;\n                e.removeChild(n);\n                n = nxt;\n              } else n = n.nextSibling;\n            } else if (n.nodeType === 1) {\n              // element node\n              X.removeWhite(n);\n              n = n.nextSibling;\n            } // any other node\n            else n = n.nextSibling;\n          }\n\n          return e;\n        }\n      };\n      if (xml.nodeType === 9) // document node\n        xml = xml.documentElement;\n      var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, \"\\t\");\n      return \"{\\n\" + tab + (tab ? json.replace(/\\t/g, tab) : json.replace(/\\t|\\n/g, \"\")) + \"\\n}\";\n    }\n\n    function parseXml(xml) {\n      var _window;\n\n      let dom = null;\n\n      if ((_window = window) === null || _window === void 0 ? void 0 : _window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(xml, \"text/xml\");\n        } catch (e) {\n          dom = null;\n        }\n      } else alert(\"cannot parse xml string!\");\n\n      return dom;\n    }\n\n    async function textData(toFetchPath) {\n      const response = await fetch(toFetchPath).then(function (response) {\n        console.log(\"Successful fetch at \" + toFetchPath);\n        return response.text();\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n      return Promise.resolve(response);\n    }\n\n    textData(\"../data/memData.xml\").then(res => {\n      let dom = parseXml(res);\n      let result = xml2json(dom, {\n        compact: false,\n        spaces: 4\n      });\n      console.log(\"completed\");\n      setJson(result);\n    }); // const xmlval =\n    //   '<?xml version=\"1.0\" encoding=\"utf-8\"?> <note importance=\"high\" logged=\"true\"> <title>Happy</title> <todo>Work</todo> <todo>Play</todo> </note>';\n    // // let xmlval = '<e name=\"value\">text</e>';\n    // setxml(xmlval);\n    // let dom = parseXml(xmlval);\n    // setJson(xml2json(dom, \"\\t\"));\n    // console.log(xml2json(dom, \"\\t\"));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"initial xml\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: xmltest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"corresponding xml\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: json\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n\n_s(XmlToJson, \"Fyom71uTMH49K6gmCFrhlZ5D100=\");\n\n_c = XmlToJson;\nexport default XmlToJson;\n\nvar _c;\n\n$RefreshReg$(_c, \"XmlToJson\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/Extraction/XmlToJson/index.tsx"],"names":["React","useState","useEffect","XmlToJson","props","console","log","xmltest","setxml","json","setJson","xml2json","xml","tab","X","toObj","o","nodeType","attributes","length","i","nodeName","nodeValue","toString","firstChild","textChild","cdataChild","hasElementChild","n","nextSibling","match","removeWhite","escape","Array","innerXml","documentElement","alert","toJson","name","ind","join","arr","m","node","s","innerHTML","asXml","c","txt","replace","e","normalize","nxt","removeChild","parseXml","dom","window","DOMParser","parseFromString","textData","toFetchPath","response","fetch","then","text","catch","err","Promise","resolve","res","result","compact","spaces","alignItems","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n//npm install raw-loader --save-dev\n\ninterface XmlToJsonPropsInterface extends RouteComponentProps<{}> {\n  // Other props that belong to component it self not Router\n}\n\nconst XmlToJson: React.FC<XmlToJsonPropsInterface> = (\n  props: XmlToJsonPropsInterface\n) => {\n  console.log(\"RRD tool extraction\");\n\n  const [xmltest, setxml] = useState(\"\");\n  const [json, setJson] = useState(\"\");\n\n  /*\tThis work is licensed under Creative Commons GNU LGPL License.\n\n\tLicense: http://creativecommons.org/licenses/LGPL/2.1/\n   Version: 0.9\n\tAuthor:  Stefan Goessner/2006\n\tWeb:     http://goessner.net/ \n*/\n\n  useEffect(() => {\n    function xml2json(xml: any, tab: any) {\n      let X = {\n        toObj: function (xml: any) {\n          let o: any = {};\n          console.log(\"THIS: \" + xml.nodeType);\n          if (xml.nodeType === 1) {\n            // element node ..\n            if (xml.attributes.length)\n              // element with attributes  ..\n              for (let i = 0; i < xml.attributes.length; i++)\n                o[\"@\" + xml.attributes[i].nodeName] = (\n                  xml.attributes[i].nodeValue || \"\"\n                ).toString();\n            if (xml.firstChild) {\n              // element has child nodes ..\n              let textChild = 0,\n                cdataChild = 0,\n                hasElementChild = false;\n              for (let n = xml.firstChild; n; n = n.nextSibling) {\n                if (n.nodeType === 1) hasElementChild = true;\n                else if (\n                  n.nodeType === 3 &&\n                  n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)\n                )\n                  textChild++;\n                // non-whitespace text\n                else if (n.nodeType === 4) cdataChild++; // cdata section node\n              }\n              if (hasElementChild) {\n                if (textChild < 2 && cdataChild < 2) {\n                  // structured element with evtl. a single text or/and cdata node ..\n                  X.removeWhite(xml);\n                  for (var n = xml.firstChild; n; n = n.nextSibling) {\n                    if (n.nodeType === 3)\n                      // text node\n                      o[\"#text\"] = X.escape(n.nodeValue);\n                    else if (n.nodeType === 4)\n                      // cdata node\n                      o[\"#cdata\"] = X.escape(n.nodeValue);\n                    else if (o[n.nodeName]) {\n                      // multiple occurence of element ..\n                      if (o[n.nodeName] instanceof Array)\n                        o[n.nodeName][o[n.nodeName].length] = X.toObj(n);\n                      else o[n.nodeName] = [o[n.nodeName], X.toObj(n)];\n                    } // first occurence of element..\n                    else o[n.nodeName] = X.toObj(n);\n                  }\n                } else {\n                  // mixed content\n                  if (!xml.attributes.length) o = X.escape(X.innerXml(xml));\n                  else o[\"#text\"] = X.escape(X.innerXml(xml));\n                }\n              } else if (textChild) {\n                // pure text\n                if (!xml.attributes.length) o = X.escape(X.innerXml(xml));\n                else o[\"#text\"] = X.escape(X.innerXml(xml));\n              } else if (cdataChild) {\n                // cdata\n                if (cdataChild > 1) o = X.escape(X.innerXml(xml));\n                else\n                  for (var n = xml.firstChild; n; n = n.nextSibling)\n                    o[\"#cdata\"] = X.escape(n.nodeValue);\n              }\n            }\n            if (!xml.attributes.length && !xml.firstChild) o = null;\n          } else if (xml.nodeType === 9) {\n            // document.node\n            o = X.toObj(xml.documentElement);\n          } else alert(\"unhandled node type: \" + xml.nodeType);\n          return o;\n        },\n        toJson: function (o: any, name: any, ind: any) {\n          var json = name ? '\"' + name + '\"' : \"\";\n          if (o instanceof Array) {\n            for (var i = 0, n = o.length; i < n; i++)\n              o[i] = X.toJson(o[i], \"\", ind + \"\\t\");\n            json +=\n              (name ? \":[\" : \"[\") +\n              (o.length > 1\n                ? \"\\n\" + ind + \"\\t\" + o.join(\",\\n\" + ind + \"\\t\") + \"\\n\" + ind\n                : o.join(\"\")) +\n              \"]\";\n          } else if (o === null) json += (name && \":\") + \"null\";\n          else if (typeof o == \"object\") {\n            let arr: any[] = [];\n            for (var m in o) arr[arr.length] = X.toJson(o[m], m, ind + \"\\t\");\n            json +=\n              (name ? \":{\" : \"{\") +\n              (arr.length > 1\n                ? \"\\n\" + ind + \"\\t\" + arr.join(\",\\n\" + ind + \"\\t\") + \"\\n\" + ind\n                : arr.join(\"\")) +\n              \"}\";\n          } else if (typeof o === \"string\")\n            json += (name && \":\") + '\"' + o.toString() + '\"';\n          else json += (name && \":\") + o.toString();\n          return json;\n        },\n        innerXml: function (node: any) {\n          var s = \"\";\n          if (\"innerHTML\" in node) s = node.innerHTML;\n          else {\n            var asXml = function (n: any) {\n              var s = \"\";\n              if (n.nodeType === 1) {\n                s += \"<\" + n.nodeName;\n                for (var i = 0; i < n.attributes.length; i++)\n                  s +=\n                    \" \" +\n                    n.attributes[i].nodeName +\n                    '=\"' +\n                    (n.attributes[i].nodeValue || \"\").toString() +\n                    '\"';\n                if (n.firstChild) {\n                  s += \">\";\n                  for (var c = n.firstChild; c; c = c.nextSibling)\n                    s += asXml(c);\n                  s += \"</\" + n.nodeName + \">\";\n                } else s += \"/>\";\n              } else if (n.nodeType === 3) s += n.nodeValue;\n              else if (n.nodeType === 4) s += \"<![CDATA[\" + n.nodeValue + \"]]>\";\n              return s;\n            };\n            for (var c = node.firstChild; c; c = c.nextSibling) s += asXml(c);\n          }\n          return s;\n        },\n        escape: function (txt: any) {\n          return txt\n            .replace(/[\\\\]/g, \"\\\\\\\\\")\n            .replace(/[\\\"]/g, '\\\\\"')\n            .replace(/[\\n]/g, \"\\\\n\")\n            .replace(/[\\r]/g, \"\\\\r\");\n        },\n        removeWhite: function (e: any) {\n          e.normalize();\n          for (var n = e.firstChild; n; ) {\n            if (n.nodeType === 3) {\n              // text node\n              if (!n.nodeValue.match(/[^ \\f\\n\\r\\t\\v]/)) {\n                // pure whitespace text node\n                var nxt = n.nextSibling;\n                e.removeChild(n);\n                n = nxt;\n              } else n = n.nextSibling;\n            } else if (n.nodeType === 1) {\n              // element node\n              X.removeWhite(n);\n              n = n.nextSibling;\n            } // any other node\n            else n = n.nextSibling;\n          }\n          return e;\n        },\n      };\n      if (xml.nodeType === 9)\n        // document node\n        xml = xml.documentElement;\n      var json = X.toJson(X.toObj(X.removeWhite(xml)), xml.nodeName, \"\\t\");\n      return (\n        \"{\\n\" +\n        tab +\n        (tab ? json.replace(/\\t/g, tab) : json.replace(/\\t|\\n/g, \"\")) +\n        \"\\n}\"\n      );\n    }\n\n    function parseXml(xml: any) {\n      let dom: any = null;\n      if (window?.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(xml, \"text/xml\");\n        } catch (e) {\n          dom = null;\n        }\n      } else alert(\"cannot parse xml string!\");\n      return dom;\n    }\n\n    async function textData(toFetchPath: string): Promise<any[]> {\n      const response = await fetch(toFetchPath)\n        .then(function (response: any) {\n          console.log(\"Successful fetch at \" + toFetchPath);\n          return response.text();\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n      return Promise.resolve(response);\n    }\n    textData(\"../data/memData.xml\").then((res) => {\n      let dom = parseXml(res);\n      let result = xml2json(dom, { compact: false, spaces: 4 });\n      console.log(\"completed\");\n      setJson(result);\n    });\n\n    // const xmlval =\n    //   '<?xml version=\"1.0\" encoding=\"utf-8\"?> <note importance=\"high\" logged=\"true\"> <title>Happy</title> <todo>Work</todo> <todo>Play</todo> </note>';\n    // // let xmlval = '<e name=\"value\">text</e>';\n    // setxml(xmlval);\n    // let dom = parseXml(xmlval);\n    // setJson(xml2json(dom, \"\\t\"));\n\n    // console.log(xml2json(dom, \"\\t\"));\n  }, []);\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12px\" }}>\n      <div>\n        <h3>initial xml</h3>\n        <p>{xmltest}</p>\n      </div>\n      <div>\n        <h3>corresponding xml</h3>\n        <p>{json}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default XmlToJson;\n"]},"metadata":{},"sourceType":"module"}