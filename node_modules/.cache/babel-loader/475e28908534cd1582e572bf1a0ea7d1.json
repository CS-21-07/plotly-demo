{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint/index.tsx\";\nimport React from \"react\"; // import Plot from \"react-plotly.js\";\n\nimport * as companies from \"../../../data/urlMatcher.json\";\nimport \"react-datepicker/dist/react-datepicker.css\"; // npm install react-datepicker --save\n\nclass SelectedPoint extends React.Component {\n  constructor(props) {\n    super(props);\n    this.company = void 0;\n    this.dates = void 0;\n    this.dailyValues = [];\n    this.cleanDate = void 0;\n    this.plotGraphData = [];\n    this.dataGraph = [];\n    this.stockEvents = [];\n    this.state = {\n      loaded: false,\n      valuesLoaded: []\n    };\n\n    this.populateGraphValue = (dailyValuesList, graphTitle) => {\n      dailyValuesList.forEach(daily => {\n        let tempObj = {\n          name: graphTitle,\n          daily: daily\n        };\n        console.log(tempObj);\n        this.dataGraph.push(tempObj);\n        console.log(\"Number of data in my list \" + this.dataGraph.length);\n      }); // dates = [];\n\n      this.setState({\n        valuesLoaded: this.dataGraph\n      });\n    };\n\n    this.displayStock = dailyObj => {\n      console.log(dailyObj);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: dailyObj.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Date: \", dailyObj.daily.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Volume: \", dailyObj.daily.volume]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Open: \", dailyObj.daily.open]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Close: \", dailyObj.daily.close]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"High: \", dailyObj.daily.high]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Low: \", dailyObj.daily.low]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.DisplayAll = () => {\n      if (this.dataGraph.length === this.company.length) {\n        this.setState({\n          loaded: true\n        });\n      }\n\n      return this.state.valuesLoaded.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", this.displayStock(item)]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 14\n        }, this);\n      });\n    };\n\n    this.company = this.props.company;\n    this.dates = this.props.dates;\n    this.cleanDate = this.dates.length !== 0 ? this.dates[0].split(\" \")[0] : \"\";\n    console.log(this.company);\n    console.log(this.dates);\n    console.log(this.cleanDate);\n  } // setting to props parameters\n\n\n  async componentDidMount() {\n    async function myFetch(toFetch) {\n      const response = await fetch(toFetch); //   return Promise.resolve(response);\n\n      return response;\n    }\n\n    let myFetches = [];\n    let companiesFetched = [];\n    this.company.forEach(id => {\n      if (id !== \"\") {\n        var _companies$companies$, _companies$companies$2;\n\n        const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n        const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches).then(files => {\n      files.forEach(async file => {\n        var _this$stockEvents;\n\n        let data = await file.json();\n        this.stockEvents = data;\n        console.log((_this$stockEvents = this.stockEvents) === null || _this$stockEvents === void 0 ? void 0 : _this$stockEvents.length);\n        console.log(this.stockEvents);\n        this.stockEvents.forEach(stocky => {\n          let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n\n          if (obj.Date === this.cleanDate) {\n            let dailyExchangeObj = {\n              date: obj.Date,\n              high: obj.High,\n              low: obj.Low,\n              open: obj.Open,\n              volume: obj.Volume,\n              close: obj.Close\n            };\n            this.dailyValues.push(dailyExchangeObj);\n          }\n        });\n        this.populateGraphValue(this.dailyValues, String(companiesFetched.pop()));\n      });\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n  }\n\n  render() {\n    return !this.state.loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        alignItems: \"center\",\n        margin: \"12px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"These are the selected values\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.DisplayAll()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"n/a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SelectedPoint;","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint/index.tsx"],"names":["React","companies","SelectedPoint","Component","constructor","props","company","dates","dailyValues","cleanDate","plotGraphData","dataGraph","stockEvents","state","loaded","valuesLoaded","populateGraphValue","dailyValuesList","graphTitle","forEach","daily","tempObj","name","console","log","push","length","setState","displayStock","dailyObj","date","volume","open","close","high","low","DisplayAll","map","item","split","componentDidMount","myFetch","toFetch","response","fetch","myFetches","companiesFetched","id","fetching","find","comp","JsonUrl","companyName","String","reverse","Promise","all","then","files","file","data","json","stocky","tempString","JSON","stringify","obj","parse","Date","dailyExchangeObj","High","Low","Open","Volume","Close","pop","catch","err","render","alignItems","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../../data/urlMatcher.json\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { ComponentProps } from \"react\";\n//npm install react-bootstrap bootstrap\n\nexport interface SelectedPointProps {\n  company: string[];\n  dates: string[];\n}\n\ntype DailyExchange = {\n  date: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  adjClose?: number;\n  volume: number;\n};\n\ntype DailyDisplay = {\n  name: string;\n  daily: DailyExchange;\n};\n\nclass SelectedPoint extends React.Component<{\n  company: string[];\n  dates: string[];\n}> {\n  private company: string[];\n  private dates: string[];\n\n  dailyValues: DailyExchange[] = [];\n  cleanDate: string;\n  plotGraphData: any[] = [];\n  dataGraph: any[] = [];\n  stockEvents: any[] = [];\n\n  state = {\n    loaded: false,\n    valuesLoaded: [],\n  };\n\n  constructor(props: SelectedPointProps) {\n    super(props);\n    this.company = this.props.company;\n    this.dates = this.props.dates;\n    this.cleanDate = this.dates.length !== 0 ? this.dates[0].split(\" \")[0] : \"\";\n    console.log(this.company);\n    console.log(this.dates);\n    console.log(this.cleanDate);\n  }\n  // setting to props parameters\n\n  async componentDidMount() {\n    async function myFetch(toFetch: string) {\n      const response = await fetch(toFetch);\n      //   return Promise.resolve(response);\n      return response;\n    }\n\n    let myFetches: any[] = [];\n    let companiesFetched: string[] = [];\n\n    this.company.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n\n    companiesFetched.reverse();\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach(async (file) => {\n          let data = await file.json();\n          this.stockEvents = data;\n          console.log(this.stockEvents?.length);\n          console.log(this.stockEvents);\n          this.stockEvents.forEach((stocky) => {\n            let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n            let obj = JSON.parse(tempString);\n            if (obj.Date === this.cleanDate) {\n              let dailyExchangeObj: DailyExchange = {\n                date: obj.Date,\n                high: obj.High,\n                low: obj.Low,\n                open: obj.Open,\n                volume: obj.Volume,\n                close: obj.Close,\n              };\n              this.dailyValues.push(dailyExchangeObj);\n            }\n          });\n          this.populateGraphValue(\n            this.dailyValues,\n            String(companiesFetched.pop())\n          );\n        });\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n  }\n\n  populateGraphValue = (dailyValuesList: any[], graphTitle: string) => {\n    dailyValuesList.forEach((daily) => {\n      let tempObj: DailyDisplay = {\n        name: graphTitle,\n        daily: daily,\n      };\n\n      console.log(tempObj);\n      this.dataGraph.push(tempObj);\n      console.log(\"Number of data in my list \" + this.dataGraph.length);\n    });\n    // dates = [];\n    this.setState({ valuesLoaded: this.dataGraph });\n  };\n\n  displayStock = (dailyObj) => {\n    console.log(dailyObj);\n    return (\n      <div>\n        <h3>{dailyObj.name}</h3>\n        <ul>\n          <li>Date: {dailyObj.daily.date}</li>\n          <li>Volume: {dailyObj.daily.volume}</li>\n          <li>Open: {dailyObj.daily.open}</li>\n          <li>Close: {dailyObj.daily.close}</li>\n          <li>High: {dailyObj.daily.high}</li>\n          <li>Low: {dailyObj.daily.low}</li>\n        </ul>\n      </div>\n    );\n  };\n\n  DisplayAll = () => {\n    if (this.dataGraph.length === this.company.length) {\n      this.setState({ loaded: true });\n    }\n    return this.state.valuesLoaded.map((item) => {\n      return <div key={item}> {this.displayStock(item)}</div>;\n    });\n  };\n\n  public render() {\n    return !this.state.loaded ? (\n      <div style={{ alignItems: \"center\", margin: \"12px\" }}>\n        <div>These are the selected values</div>\n        <div>{this.DisplayAll()}</div>\n      </div>\n    ) : (\n      <div>\n        <h2>n/a</h2>\n      </div>\n    );\n  }\n}\n\nexport default SelectedPoint;\n"]},"metadata":{},"sourceType":"module"}