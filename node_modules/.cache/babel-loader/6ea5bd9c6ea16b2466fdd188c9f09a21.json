{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nconst CombineGraph = props => {\n  _s();\n\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n  const companyList = company.split(\"+\");\n  console.log(companyList);\n  let dailyValues = [];\n  let dailyValuesOrdinate = [];\n  let dates = []; // const TEST_COMP = [\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/ffivestock.json\",\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/citrixstock.json\",\n  // ];\n  // const TEST_COMP_NAME = [\"F-5\", \"Citrix\"];\n\n  let plotGraphData = [];\n  const [fetchUrl, setfetchUrl] = useState(\"ffive\");\n  const [trigger, setTrigger] = useState(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [dataGraph, setDataGraph] = useState([]);\n  const [readyToPop, setReadyToPop] = useState(false);\n  const [xx, setxx] = useState([]);\n  const [yy, setyy] = useState([]);\n  const [whichAxes, setWhichY] = useState(\"\");\n  useEffect(() => {\n    async function data(toFetch) {\n      const response = await fetch(toFetch).then(function (response) {\n        console.log(\"Successful fetch at \" + toFetch);\n        return response.json();\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n      return Promise.resolve(response);\n    } // for (let i = 0; i < companyList.length; i++) {\n\n\n    for (let i = 0; i < companyList.length - 1; i++) {\n      var _companies$companies$, _companies$companies$2;\n\n      // dailyValues = [];\n      // dailyValuesOrdinate = [];\n      // dates = [];\n      if (i != 0) {\n        setWhichY(i.toString());\n      }\n\n      const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === companyList[i])) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n      console.log(\"we are fetching: \" + fetching);\n      const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === companyList[i])) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name; // const fetching = TEST_COMP[i];\n\n      console.log(\"we are fetching: \" + companyName); // const companyName = TEST_COMP_NAME[i];\n\n      const graphTitle = (companyName === null || companyName === void 0 ? void 0 : companyName.toUpperCase()) + \" - Stock Market: (\" + option + \")\";\n      setGraphTitle(graphTitle);\n      setfetchUrl(fetching);\n      data(fetchUrl).then(response => {\n        const stockEvents = response;\n        console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n        console.log(stockEvents);\n\n        for (let i = 0; i < (stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length); i++) {\n          // let obj: DailyExchange = stockEvents[i]; //extract(stockEvents[i]);\n          let tempString = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close\n          };\n          dailyValues.push(dailyExchangeObj);\n        } //populateGraphValue();\n\n\n        setReadyToPop(!readyToPop);\n      });\n      setValue(option);\n    }\n  }, []);\n  useEffect(() => {\n    setxx([]);\n    setyy([]);\n\n    async function populateGraphValue() {\n      for (let i = 0; i < dailyValues.length; i++) {\n        manageOption(dailyValues[i]);\n        dates.push(toDateObject(dailyValues[i].date));\n      }\n\n      setxx(dates);\n      setyy(dailyValuesOrdinate);\n      console.log(xx);\n      console.log(yy);\n      const graphData = {\n        x: xx,\n        y: yy,\n        type: \"scatter\",\n        mode: \"lines\",\n        yaxis: \"y\".concat(whichAxes),\n        name: GraphTitle\n      };\n      console.log(graphData);\n      plotGraphData = dataGraph;\n      plotGraphData.push(graphData);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of graph in my list \" + plotGraphData.length);\n      return Promise.resolve(graphData);\n    }\n\n    const myGraphdata = populateGraphValue().then(response => {\n      console.log(response);\n      plotGraphData = dataGraph;\n      plotGraphData.push(response);\n      setDataGraph(plotGraphData);\n      console.log(dataGraph);\n    });\n    console.log(\"Number of graph in my list \" + plotGraphData.length); // dailyValues = [];\n    // dailyValuesOrdinate = [];\n    // dates = [];\n  }, [readyToPop]); // function populateGraphValue(): void {\n  //   // setxx([]);\n  //   // setyy([]);\n  //   for (let i = 0; i < dailyValues.length; i++) {\n  //     manageOption(dailyValues[i]);\n  //     dates.push(toDateObject(dailyValues[i].date));\n  //   }\n  //   setxx(dates);\n  //   setyy(dailyValuesOrdinate);\n  //   console.log(xx);\n  //   console.log(yy);\n  //   let graphData: PlotGraph = {\n  //     x: xx,\n  //     y: yy,\n  //     type: \"scatter\",\n  //     mode: \"lines\",\n  //     yaxis: \"y\".concat(whichAxes),\n  //     name: GraphTitle,\n  //   };\n  //   console.log(graphData);\n  //   plotGraphData = dataGraph;\n  //   plotGraphData.push(graphData);\n  //   setDataGraph(plotGraphData);\n  //   console.log(\"Number of graph in my list \" + plotGraphData.length);\n  // }\n\n  function manageOption(obj) {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        break;\n\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function toDateObject(dateString) {\n    const temp = dateString.split(\"-\");\n    const date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleChange(event) {\n    const linkvalue = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/home\",\n        type: \"button\",\n        children: \"Go to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: value,\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Select from Menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Open\",\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Volume\",\n            children: \"Volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Close\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"High\",\n            children: \"High\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Low\",\n            children: \"Low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: extension,\n        children: \"Visualize \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Plot, {\n        data: dataGraph,\n        layout: {\n          width: 1000,\n          height: 600,\n          title: GraphTitle\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CombineGraph, \"QoooyCP4Uu4AL1ZaLQ+Er+nX0EU=\");\n\n_c2 = CombineGraph;\nexport default CombineGraph;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"CombineGraph\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/CombineGraphPage.tsx"],"names":["React","useState","useEffect","companies","Link","Plotly","createPlotlyComponent","Plot","CombineGraph","props","company","match","params","option","companyList","split","console","log","dailyValues","dailyValuesOrdinate","dates","plotGraphData","fetchUrl","setfetchUrl","trigger","setTrigger","extension","setExtension","value","setValue","GraphTitle","setGraphTitle","dataGraph","setDataGraph","readyToPop","setReadyToPop","xx","setxx","yy","setyy","whichAxes","setWhichY","data","toFetch","response","fetch","then","json","catch","err","Promise","resolve","i","length","toString","fetching","find","comp","id","JsonUrl","companyName","name","graphTitle","toUpperCase","stockEvents","tempString","JSON","stringify","obj","parse","dailyExchangeObj","date","Date","high","High","low","Low","open","Open","volume","Volume","close","Close","push","populateGraphValue","manageOption","toDateObject","graphData","x","y","type","mode","yaxis","concat","myGraphdata","dateString","temp","setFullYear","parseInt","handleChange","event","linkvalue","target","toLowerCase","alignItems","margin","width","height","title"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AAEA;AACA,OAAO,KAAKC,SAAZ,MAA2B,yBAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,MAAMC,IAAI,GAAGD,qBAAqB,CAACD,MAAD,CAAlC;KAAME,I;;AAON,MAAMC,YAAkD,GACtDC,KADyD,IAEtD;AAAA;;AACH;AACA,QAAMC,OAAO,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,OAAnC;AACA,QAAMG,MAAM,GAAGJ,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,MAAlC;AAEA,QAAMC,WAAqB,GAAGJ,OAAO,CAACK,KAAR,CAAc,GAAd,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAyBA,MAAII,WAA4B,GAAG,EAAnC;AACA,MAAIC,mBAA6B,GAAG,EAApC;AACA,MAAIC,KAAa,GAAG,EAApB,CAjCG,CAmCH;AACA;AACA;AACA;AACA;;AAEA,MAAIC,aAAoB,GAAG,EAA3B;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAM,OAAN,CAAxC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,CAAU,IAAV,CAAtC;AACA,QAAM,CAACyB,SAAD,EAAYC,YAAZ,IAA4B1B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC2B,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAAS,OAAT,CAAlC;AACA,QAAM,CAAC6B,UAAD,EAAaC,aAAb,IAA8B9B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC+B,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,CAAQ,EAAR,CAA1C;AACA,QAAM,CAACiC,UAAD,EAAaC,aAAb,IAA8BlC,QAAQ,CAAU,KAAV,CAA5C;AACA,QAAM,CAACmC,EAAD,EAAKC,KAAL,IAAcpC,QAAQ,CAAS,EAAT,CAA5B;AACA,QAAM,CAACqC,EAAD,EAAKC,KAAL,IAActC,QAAQ,CAAW,EAAX,CAA5B;AACA,QAAM,CAACuC,SAAD,EAAYC,SAAZ,IAAyBxC,QAAQ,CAAS,EAAT,CAAvC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAewC,IAAf,CAAoBC,OAApB,EAAqD;AACnD,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAD,CAAL,CACpBG,IADoB,CACf,UAAUF,QAAV,EAAyB;AAC7B5B,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyB0B,OAArC;AACA,eAAOC,QAAQ,CAACG,IAAT,EAAP;AACD,OAJoB,EAKpBC,KALoB,CAKbC,GAAD,IAAS;AACdjC,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CgC,GAA9C;AACD,OAPoB,CAAvB;AAQA,aAAOC,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAP;AACD,KAXa,CAad;;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtC,WAAW,CAACuC,MAAZ,GAAqB,CAAzC,EAA4CD,CAAC,EAA7C,EAAiD;AAAA;;AAC/C;AACA;AACA;AACA,UAAIA,CAAC,IAAI,CAAT,EAAY;AACVX,QAAAA,SAAS,CAACW,CAAC,CAACE,QAAF,EAAD,CAAT;AACD;;AAED,YAAMC,QAAQ,4BAAGpD,SAAS,CAACA,SAAV,CAAoBqD,IAApB,CACdC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAY5C,WAAW,CAACsC,CAAD,CADlB,CAAH,0DAAG,sBAEdO,OAFH;AAGA3C,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBsC,QAAlC;AAEA,YAAMK,WAAW,6BAAGzD,SAAS,CAACA,SAAV,CAAoBqD,IAApB,CACjBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAY5C,WAAW,CAACsC,CAAD,CADf,CAAH,2DAAG,uBAEjBS,IAFH,CAb+C,CAgB/C;;AACA7C,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsB2C,WAAlC,EAjB+C,CAmB/C;;AAEA,YAAME,UAAkB,GACtB,CAAAF,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEG,WAAb,MAA6B,oBAA7B,GAAoDlD,MAApD,GAA6D,GAD/D;AAEAkB,MAAAA,aAAa,CAAC+B,UAAD,CAAb;AAEAvC,MAAAA,WAAW,CAACgC,QAAD,CAAX;AACAb,MAAAA,IAAI,CAACpB,QAAD,CAAJ,CAAewB,IAAf,CAAqBF,QAAD,IAAc;AAChC,cAAMoB,WAAkB,GAAGpB,QAA3B;AACA5B,QAAAA,OAAO,CAACC,GAAR,CAAY+C,WAAZ,aAAYA,WAAZ,uBAAYA,WAAW,CAAEX,MAAzB;AACArC,QAAAA,OAAO,CAACC,GAAR,CAAY+C,WAAZ;;AACA,aAAK,IAAIZ,CAAS,GAAG,CAArB,EAAwBA,CAAC,IAAGY,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEX,MAAhB,CAAzB,EAAiDD,CAAC,EAAlD,EAAsD;AACpD;AACA,cAAIa,UAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeH,WAAW,CAACZ,CAAD,CAA1B,CAAzB,CAFoD,CAEK;;AACzD,cAAIgB,GAAG,GAAGF,IAAI,CAACG,KAAL,CAAWJ,UAAX,CAAV;AACA,cAAIK,gBAA+B,GAAG;AACpCC,YAAAA,IAAI,EAAEH,GAAG,CAACI,IAD0B;AAEpCC,YAAAA,IAAI,EAAEL,GAAG,CAACM,IAF0B;AAGpCC,YAAAA,GAAG,EAAEP,GAAG,CAACQ,GAH2B;AAIpCC,YAAAA,IAAI,EAAET,GAAG,CAACU,IAJ0B;AAKpCC,YAAAA,MAAM,EAAEX,GAAG,CAACY,MALwB;AAMpCC,YAAAA,KAAK,EAAEb,GAAG,CAACc;AANyB,WAAtC;AAQAhE,UAAAA,WAAW,CAACiE,IAAZ,CAAiBb,gBAAjB;AACD,SAjB+B,CAkBhC;;;AACAnC,QAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,OApBD;AAqBAL,MAAAA,QAAQ,CAAChB,MAAD,CAAR;AACD;AACF,GA/DQ,EA+DN,EA/DM,CAAT;AAiEAX,EAAAA,SAAS,CAAC,MAAM;AACdmC,IAAAA,KAAK,CAAC,EAAD,CAAL;AACAE,IAAAA,KAAK,CAAC,EAAD,CAAL;;AAEA,mBAAe6C,kBAAf,GAAwD;AACtD,WAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,WAAW,CAACmC,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3CiC,QAAAA,YAAY,CAACnE,WAAW,CAACkC,CAAD,CAAZ,CAAZ;AACAhC,QAAAA,KAAK,CAAC+D,IAAN,CAAWG,YAAY,CAACpE,WAAW,CAACkC,CAAD,CAAX,CAAemB,IAAhB,CAAvB;AACD;;AACDlC,MAAAA,KAAK,CAACjB,KAAD,CAAL;AACAmB,MAAAA,KAAK,CAACpB,mBAAD,CAAL;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYmB,EAAZ;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,EAAZ;AAEA,YAAMiD,SAAoB,GAAG;AAC3BC,QAAAA,CAAC,EAAEpD,EADwB;AAE3BqD,QAAAA,CAAC,EAAEnD,EAFwB;AAG3BoD,QAAAA,IAAI,EAAE,SAHqB;AAI3BC,QAAAA,IAAI,EAAE,OAJqB;AAK3BC,QAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAWrD,SAAX,CALoB;AAM3BqB,QAAAA,IAAI,EAAE/B;AANqB,OAA7B;AAQAd,MAAAA,OAAO,CAACC,GAAR,CAAYsE,SAAZ;AACAlE,MAAAA,aAAa,GAAGW,SAAhB;AACAX,MAAAA,aAAa,CAAC8D,IAAd,CAAmBI,SAAnB;AACAtD,MAAAA,YAAY,CAACZ,aAAD,CAAZ;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCI,aAAa,CAACgC,MAA1D;AAEA,aAAOH,OAAO,CAACC,OAAR,CAAgBoC,SAAhB,CAAP;AACD;;AAED,UAAMO,WAAW,GAAGV,kBAAkB,GAAGtC,IAArB,CAA2BF,QAAD,IAAc;AAC1D5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,QAAZ;AACAvB,MAAAA,aAAa,GAAGW,SAAhB;AACAX,MAAAA,aAAa,CAAC8D,IAAd,CAAmBvC,QAAnB;AACAX,MAAAA,YAAY,CAACZ,aAAD,CAAZ;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYe,SAAZ;AACD,KANmB,CAApB;AAQAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCI,aAAa,CAACgC,MAA1D,EAvCc,CAyCd;AACA;AACA;AACD,GA5CQ,EA4CN,CAACnB,UAAD,CA5CM,CAAT,CAvHG,CAqKH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAASmD,YAAT,CAAsBjB,GAAtB,EAAgD;AAC9C,YAAQvD,MAAR;AACE,WAAK,OAAL;AACEM,QAAAA,mBAAmB,CAACgE,IAApB,CAAyBf,GAAG,CAACa,KAA7B;AACA;;AACF,WAAK,MAAL;AACE9D,QAAAA,mBAAmB,CAACgE,IAApB,CAAyBf,GAAG,CAACK,IAA7B;AACA;;AACF,WAAK,KAAL;AACEtD,QAAAA,mBAAmB,CAACgE,IAApB,CAAyBf,GAAG,CAACO,GAA7B;AACA;;AACF,WAAK,QAAL;AACExD,QAAAA,mBAAmB,CAACgE,IAApB,CAAyBf,GAAG,CAACW,MAA7B;AACA;;AACF,WAAK,MAAL;AACE5D,QAAAA,mBAAmB,CAACgE,IAApB,CAAyBf,GAAG,CAACS,IAA7B;AACA;;AACF;AACE1D,QAAAA,mBAAmB,CAACgE,IAApB,CAAyBf,GAAG,CAACa,KAA7B;AACA;AAlBJ;AAoBD;;AAED,WAASK,YAAT,CAAsBS,UAAtB,EAAgD;AAC9C,UAAMC,IAAc,GAAGD,UAAU,CAAChF,KAAX,CAAiB,GAAjB,CAAvB;AACA,UAAMwD,IAAU,GAAG,IAAIC,IAAJ,EAAnB;AACAD,IAAAA,IAAI,CAAC0B,WAAL,CAAiBC,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAzB,EAAoCE,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAA5C,EAAuDE,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAA/D;AACA,WAAOzB,IAAP;AACD;;AAED,WAAS4B,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAMC,SAAiB,GAAGD,KAAK,CAACE,MAAN,CAAa1E,KAAvC;AACAC,IAAAA,QAAQ,CAACwE,SAAD,CAAR;AACA1E,IAAAA,YAAY,CAAC,aAAajB,OAAb,GAAuB,GAAvB,GAA6B2F,SAAS,CAACE,WAAV,EAA9B,CAAZ;AACAvF,IAAAA,OAAO,CAACC,GAAR,CAAYS,SAAZ;AACD;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAE8E,MAAAA,UAAU,EAAE,QAAd;AAAwBC,MAAAA,MAAM,EAAE;AAAhC,KAAZ;AAAA,4BACE;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAE,OAAV;AAAmB,QAAA,IAAI,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,8BACE;AAAA,8DAEE;AAAQ,UAAA,KAAK,EAAE7E,KAAf;AAAsB,UAAA,QAAQ,EAAEuE,YAAhC;AAAA,kCACE;AAAQ,YAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAQ,YAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAQ,YAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAQ,YAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAG,QAAA,IAAI,EAAEzE,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAoBE;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,IAAI,EAAEM,SADR;AAEE,QAAA,MAAM,EAAE;AACN0E,UAAAA,KAAK,EAAE,IADD;AAENC,UAAAA,MAAM,EAAE,GAFF;AAGNC,UAAAA,KAAK,EAAE9E;AAHD;AAFV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD,CAxQD;;GAAMtB,Y;;MAAAA,Y;AA0QN,eAAeA,YAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\ninterface CombineGraphPropsInterface\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\nconst CombineGraph: React.FC<CombineGraphPropsInterface> = (\n  props: CombineGraphPropsInterface\n) => {\n  // setting to props parameters\n  const company = props.match.params.company;\n  const option = props.match.params.option;\n\n  const companyList: string[] = company.split(\"+\");\n  console.log(companyList);\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  type Marker = {\n    color: string;\n  };\n\n  type PlotGraph = {\n    x: any[];\n    y: any[];\n    type: string;\n    mode?: string;\n    name?: string;\n    yaxis: string;\n  };\n\n  let dailyValues: DailyExchange[] = [];\n  let dailyValuesOrdinate: number[] = [];\n  let dates: Date[] = [];\n\n  // const TEST_COMP = [\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/ffivestock.json\",\n  //   \"https://raw.githubusercontent.com/CS-21-07/jsonStorage/main/citrixstock.json\",\n  // ];\n  // const TEST_COMP_NAME = [\"F-5\", \"Citrix\"];\n\n  let plotGraphData: any[] = [];\n\n  const [fetchUrl, setfetchUrl] = useState<any>(\"ffive\");\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [GraphTitle, setGraphTitle] = useState(\"\");\n  const [dataGraph, setDataGraph] = useState<any[]>([]);\n  const [readyToPop, setReadyToPop] = useState<boolean>(false);\n  const [xx, setxx] = useState<Date[]>([]);\n  const [yy, setyy] = useState<number[]>([]);\n  const [whichAxes, setWhichY] = useState<string>(\"\");\n\n  useEffect(() => {\n    async function data(toFetch: string): Promise<any[]> {\n      const response = await fetch(toFetch)\n        .then(function (response: any) {\n          console.log(\"Successful fetch at \" + toFetch);\n          return response.json();\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n      return Promise.resolve(response);\n    }\n\n    // for (let i = 0; i < companyList.length; i++) {\n    for (let i = 0; i < companyList.length - 1; i++) {\n      // dailyValues = [];\n      // dailyValuesOrdinate = [];\n      // dates = [];\n      if (i != 0) {\n        setWhichY(i.toString());\n      }\n\n      const fetching = companies.companies.find(\n        (comp) => comp.id === companyList[i]\n      )?.JsonUrl;\n      console.log(\"we are fetching: \" + fetching);\n\n      const companyName = companies.companies.find(\n        (comp) => comp.id === companyList[i]\n      )?.name;\n      // const fetching = TEST_COMP[i];\n      console.log(\"we are fetching: \" + companyName);\n\n      // const companyName = TEST_COMP_NAME[i];\n\n      const graphTitle: string =\n        companyName?.toUpperCase() + \" - Stock Market: (\" + option + \")\";\n      setGraphTitle(graphTitle);\n\n      setfetchUrl(fetching);\n      data(fetchUrl).then((response) => {\n        const stockEvents: any[] = response;\n        console.log(stockEvents?.length);\n        console.log(stockEvents);\n        for (let i: number = 0; i < stockEvents?.length; i++) {\n          // let obj: DailyExchange = stockEvents[i]; //extract(stockEvents[i]);\n          let tempString: string = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n          let obj = JSON.parse(tempString);\n          let dailyExchangeObj: DailyExchange = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close,\n          };\n          dailyValues.push(dailyExchangeObj);\n        }\n        //populateGraphValue();\n        setReadyToPop(!readyToPop);\n      });\n      setValue(option);\n    }\n  }, []);\n\n  useEffect(() => {\n    setxx([]);\n    setyy([]);\n\n    async function populateGraphValue(): Promise<PlotGraph> {\n      for (let i = 0; i < dailyValues.length; i++) {\n        manageOption(dailyValues[i]);\n        dates.push(toDateObject(dailyValues[i].date));\n      }\n      setxx(dates);\n      setyy(dailyValuesOrdinate);\n      console.log(xx);\n      console.log(yy);\n\n      const graphData: PlotGraph = {\n        x: xx,\n        y: yy,\n        type: \"scatter\",\n        mode: \"lines\",\n        yaxis: \"y\".concat(whichAxes),\n        name: GraphTitle,\n      };\n      console.log(graphData);\n      plotGraphData = dataGraph;\n      plotGraphData.push(graphData);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of graph in my list \" + plotGraphData.length);\n\n      return Promise.resolve(graphData);\n    }\n\n    const myGraphdata = populateGraphValue().then((response) => {\n      console.log(response);\n      plotGraphData = dataGraph;\n      plotGraphData.push(response);\n      setDataGraph(plotGraphData);\n      console.log(dataGraph);\n    });\n\n    console.log(\"Number of graph in my list \" + plotGraphData.length);\n\n    // dailyValues = [];\n    // dailyValuesOrdinate = [];\n    // dates = [];\n  }, [readyToPop]);\n\n  // function populateGraphValue(): void {\n  //   // setxx([]);\n  //   // setyy([]);\n  //   for (let i = 0; i < dailyValues.length; i++) {\n  //     manageOption(dailyValues[i]);\n  //     dates.push(toDateObject(dailyValues[i].date));\n  //   }\n  //   setxx(dates);\n  //   setyy(dailyValuesOrdinate);\n  //   console.log(xx);\n  //   console.log(yy);\n\n  //   let graphData: PlotGraph = {\n  //     x: xx,\n  //     y: yy,\n  //     type: \"scatter\",\n  //     mode: \"lines\",\n  //     yaxis: \"y\".concat(whichAxes),\n  //     name: GraphTitle,\n  //   };\n  //   console.log(graphData);\n  //   plotGraphData = dataGraph;\n  //   plotGraphData.push(graphData);\n  //   setDataGraph(plotGraphData);\n  //   console.log(\"Number of graph in my list \" + plotGraphData.length);\n  // }\n\n  function manageOption(obj: DailyExchange): void {\n    switch (option) {\n      case \"close\":\n        dailyValuesOrdinate.push(obj.close);\n        break;\n      case \"high\":\n        dailyValuesOrdinate.push(obj.high);\n        break;\n      case \"low\":\n        dailyValuesOrdinate.push(obj.low);\n        break;\n      case \"volume\":\n        dailyValuesOrdinate.push(obj.volume);\n        break;\n      case \"open\":\n        dailyValuesOrdinate.push(obj.open);\n        break;\n      default:\n        dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  }\n\n  function toDateObject(dateString: string): Date {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  }\n\n  function handleChange(event) {\n    const linkvalue: string = event.target.value;\n    setValue(linkvalue);\n    setExtension(\"/visual/\" + company + \"/\" + linkvalue.toLowerCase());\n    console.log(extension);\n  }\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12\" }}>\n      <div>\n        <Link to={\"/home\"} type=\"button\">\n          Go to Home\n        </Link>\n      </div>\n      <div>\n        <label>\n          Pick the chart to display:\n          <select value={value} onChange={handleChange}>\n            <option value=\"Close\">Select from Menu</option>\n            <option value=\"Open\">Open</option>\n            <option value=\"Volume\">Volume</option>\n            <option value=\"Close\">Close</option>\n            <option value=\"High\">High</option>\n            <option value=\"Low\">Low</option>\n          </select>\n        </label>\n        <a href={extension}>Visualize </a>\n      </div>\n      <div>\n        <Plot\n          data={dataGraph}\n          layout={{\n            width: 1000,\n            height: 600,\n            title: GraphTitle,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CombineGraph;\n"]},"metadata":{},"sourceType":"module"}