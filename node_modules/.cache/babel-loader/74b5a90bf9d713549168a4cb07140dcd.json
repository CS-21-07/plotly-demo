{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport \"react-datepicker/dist/react-datepicker.css\"; // npm install react-datepicker --save\n\n//npm install react-bootstrap bootstrap\nconst SelectedPoint = ({\n  company,\n  dates\n}) => {\n  _s();\n\n  // setting to props parameters\n  let plotGraphData = [];\n  const [fetchUrl, setfetchUrl] = useState();\n  const [trigger, setTrigger] = useState(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState(\"Close\");\n  const [xx, setxx] = useState([]);\n  const [yy, setyy] = useState([]);\n  const [isVolume, SetIsVolume] = useState(value === \"Volume\");\n  const [dataGraph, setDataGraph] = useState([]);\n  useEffect(() => {\n    async function myFetch(toFetch) {\n      const response = await fetch(toFetch).then(function (response) {\n        console.log(\"Successful fetch at \" + toFetch);\n        return response.json();\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n      return Promise.resolve(response);\n    }\n\n    let myFetches = [];\n    let companiesFetched = [];\n    let cleanDate = dates.length !== 0 ? dates[0].split(\" \")[0] : \"\";\n    company.forEach(id => {\n      if (id !== \"\") {\n        var _companies$companies$, _companies$companies$2;\n\n        const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n        const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    Promise.all(myFetches).then(files => {\n      files.forEach(file => {\n        process(file.json(), String(companiesFetched.pop()));\n      });\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    }); //   dates.forEach((date) => {\n    //       cleanDates.push(date.split(\" \")[0]);\n    //   })\n\n    function process(prom, graphTitle) {\n      let dailyValues = [];\n      prom.then(data => {\n        const stockEvents = data;\n        console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n        console.log(stockEvents);\n        stockEvents.forEach(stocky => {\n          let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n          let obj = JSON.parse(tempString);\n\n          if (obj.Date === cleanDate) {\n            let dailyExchangeObj = {\n              date: obj.Date,\n              high: obj.High,\n              low: obj.Low,\n              open: obj.Open,\n              volume: obj.Volume,\n              close: obj.Close\n            };\n            dailyValues.push(dailyExchangeObj);\n          }\n        });\n        populateGraphValue(dailyValues, graphTitle);\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n    }\n  }, []);\n\n  function populateGraphValue(dailyValuesList, graphTitle) {\n    console.log(dailyValuesList);\n    dailyValuesList.forEach(daily => {\n      let tempObj = {\n        name: graphTitle,\n        daily: daily\n      };\n      console.log(daily);\n      plotGraphData = dataGraph;\n      plotGraphData.push(daily);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of data in my list \" + plotGraphData.length);\n    });\n    dates = [];\n  }\n\n  function displayStock(dailyObj) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: dailyObj.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Date: \", dailyObj.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Volume: \", dailyObj.volume]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Open: \", dailyObj.open]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Close: \", dailyObj.close]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"High: \", dailyObj.high]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Low: \", dailyObj.low]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n  function DisplayAll() {\n    return dataGraph.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", displayStock(item)]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 14\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"These are the selected values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), DisplayAll]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectedPoint, \"ZEtoQzBYrqLQWDBIXm3FrAN2yX0=\");\n\n_c = SelectedPoint;\nexport default SelectedPoint;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedPoint\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint.tsx"],"names":["React","useState","useEffect","companies","SelectedPoint","company","dates","plotGraphData","fetchUrl","setfetchUrl","trigger","setTrigger","extension","setExtension","value","setValue","xx","setxx","yy","setyy","isVolume","SetIsVolume","dataGraph","setDataGraph","myFetch","toFetch","response","fetch","then","console","log","json","catch","err","Promise","resolve","myFetches","companiesFetched","cleanDate","length","split","forEach","id","fetching","find","comp","JsonUrl","companyName","name","push","String","reverse","all","files","file","process","pop","prom","graphTitle","dailyValues","data","stockEvents","stocky","tempString","JSON","stringify","obj","parse","Date","dailyExchangeObj","date","high","High","low","Low","open","Open","volume","Volume","close","Close","populateGraphValue","dailyValuesList","daily","tempObj","displayStock","dailyObj","DisplayAll","map","item","alignItems","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nconst SelectedPoint: React.FC<{ company: string[]; dates: string[] }> = ({\n  company,\n  dates,\n}) => {\n  // setting to props parameters\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  type DailyDisplay = {\n    name: string;\n    daily: DailyExchange;\n  };\n\n  let plotGraphData: any[] = [];\n\n  const [fetchUrl, setfetchUrl] = useState<any>();\n  const [trigger, setTrigger] = useState<boolean>(true);\n  const [extension, setExtension] = useState(\"\");\n  const [value, setValue] = useState<string>(\"Close\");\n  const [xx, setxx] = useState<Date[]>([]);\n  const [yy, setyy] = useState<number[]>([]);\n  const [isVolume, SetIsVolume] = useState(value === \"Volume\");\n  const [dataGraph, setDataGraph] = useState<any[]>([]);\n\n  useEffect(() => {\n    async function myFetch(toFetch: string): Promise<any[]> {\n      const response = await fetch(toFetch)\n        .then(function (response: any) {\n          console.log(\"Successful fetch at \" + toFetch);\n          return response.json();\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n      return Promise.resolve(response);\n    }\n\n    let myFetches: any[] = [];\n    let companiesFetched: string[] = [];\n    let cleanDate: string = dates.length !== 0 ? dates[0].split(\" \")[0] : \"\";\n\n    company.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n\n    companiesFetched.reverse();\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach((file) => {\n          process(file.json(), String(companiesFetched.pop()));\n        });\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n\n    //   dates.forEach((date) => {\n    //       cleanDates.push(date.split(\" \")[0]);\n    //   })\n\n    function process(prom, graphTitle: string) {\n      let dailyValues: DailyExchange[] = [];\n      prom\n        .then((data) => {\n          const stockEvents: any[] = data;\n          console.log(stockEvents?.length);\n          console.log(stockEvents);\n          stockEvents.forEach((stocky) => {\n            let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n            let obj = JSON.parse(tempString);\n            if (obj.Date === cleanDate) {\n              let dailyExchangeObj: DailyExchange = {\n                date: obj.Date,\n                high: obj.High,\n                low: obj.Low,\n                open: obj.Open,\n                volume: obj.Volume,\n                close: obj.Close,\n              };\n              dailyValues.push(dailyExchangeObj);\n            }\n          });\n          populateGraphValue(dailyValues, graphTitle);\n        })\n        .catch((err) => {\n          console.log(\"There was an error in fetching\", err);\n        });\n    }\n  }, []);\n\n  function populateGraphValue(\n    dailyValuesList: any[],\n    graphTitle: string\n  ): void {\n    console.log(dailyValuesList);\n    dailyValuesList.forEach((daily) => {\n      let tempObj: DailyDisplay = {\n        name: graphTitle,\n        daily: daily,\n      };\n\n      console.log(daily);\n      plotGraphData = dataGraph;\n      plotGraphData.push(daily);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of data in my list \" + plotGraphData.length);\n    });\n    dates = [];\n  }\n\n  function displayStock(dailyObj) {\n    return (\n      <div>\n        <h3>{dailyObj.name}</h3>\n        <ul>\n          <li>Date: {dailyObj.date}</li>\n          <li>Volume: {dailyObj.volume}</li>\n          <li>Open: {dailyObj.open}</li>\n          <li>Close: {dailyObj.close}</li>\n          <li>High: {dailyObj.high}</li>\n          <li>Low: {dailyObj.low}</li>\n        </ul>\n      </div>\n    );\n  }\n\n  function DisplayAll() {\n    return dataGraph.map((item) => {\n      return <div key={item}> {displayStock(item)}</div>;\n    });\n  }\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12px\" }}>\n      <div>These are the selected values</div>\n      {DisplayAll}\n    </div>\n  );\n};\n\nexport default SelectedPoint;\n"]},"metadata":{},"sourceType":"module"}