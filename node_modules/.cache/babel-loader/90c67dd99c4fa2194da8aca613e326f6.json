{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/classes/SingleGragh/index.tsx\";\nimport React from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\"; //npm install react-bootstrap bootstrap\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\n\nclass SingleGraph extends React.Component {\n  //   const defaultStartDate: Date = new Date(2000, 0, 0);\n  //   const defaultEndDate: Date = new Date();\n  constructor(props) {\n    var _companies$companies$, _companies$companies$2;\n\n    super(props);\n    this.company = void 0;\n    this.option = void 0;\n    this.dailyValues = [];\n    this.dailyValuesOrdinate = [];\n    this.dates = [];\n    this.fetchUrl = void 0;\n    this.trigger = true;\n    this.extension = \"\";\n    this.value = \"Close\";\n    this.xx = [];\n    this.yy = [];\n    this.isVolume = void 0;\n    this.startDate = new Date(2000, 0, 0);\n    this.endDate = new Date();\n    this.GraphTitle = void 0;\n    this.readyToRender = void 0;\n    this.stockEvents = [];\n    this.state = {\n      loading: true\n    };\n\n    this.populateGraphValue = () => {\n      for (let i = 0; i < this.dailyValues.length; i++) {\n        const tempDate = this.toDateObject(this.dailyValues[i].date);\n\n        if (tempDate >= this.startDate && tempDate <= this.endDate) {\n          this.manageOption(this.dailyValues[i]);\n          this.dates.push(tempDate);\n        }\n      }\n\n      this.xx = this.dates;\n      this.yy = this.dailyValuesOrdinate;\n    };\n\n    this.manageOption = obj => {\n      switch (this.option) {\n        case \"close\":\n          this.dailyValuesOrdinate.push(obj.close);\n          break;\n\n        case \"high\":\n          this.dailyValuesOrdinate.push(obj.high);\n          break;\n\n        case \"low\":\n          this.dailyValuesOrdinate.push(obj.low);\n          break;\n\n        case \"volume\":\n          this.dailyValuesOrdinate.push(obj.volume);\n          this.isVolume = true;\n          break;\n\n        case \"open\":\n          this.dailyValuesOrdinate.push(obj.open);\n          break;\n\n        default:\n          this.dailyValuesOrdinate.push(obj.close);\n          break;\n      }\n    };\n\n    this.toDateObject = dateString => {\n      const temp = dateString.split(\"-\");\n      const date = new Date();\n      date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n      return date;\n    };\n\n    this.onFetchData = async toFetch => {\n      const response = await fetch(toFetch).then(function (response) {\n        console.log(\"Successful fetch at \" + toFetch);\n        return response.json();\n      }).catch(err => {\n        console.log(\"There was an error in fetching\", err);\n      });\n      return Promise.resolve(response);\n    };\n\n    this.handleChange = event => {\n      const linkvalue = event.target.value;\n      this.setState({\n        valueoh: event.target.value\n      });\n      this.value = linkvalue;\n      this.extension = \"/visual/\" + this.company + \"/\" + linkvalue.toLowerCase();\n      console.log(this.extension);\n    };\n\n    this.company = this.props.match.params.company;\n    this.option = this.props.match.params.option;\n    this.isVolume = this.value === \"Volume\";\n    const fetching = (_companies$companies$ = companies.companies.find(comp => comp.company === this.company)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n    console.log(\"we are fetching: \" + fetching);\n    const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.company === this.company)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n    this.GraphTitle = (companyName === null || companyName === void 0 ? void 0 : companyName.toUpperCase()) + \" - Stock Market: (\" + this.option + \")\";\n    this.value = this.option;\n    this.fetchUrl = fetching;\n    this.readyToRender = false;\n  }\n\n  async componentDidMount() {\n    var _this$stockEvents;\n\n    const response = await fetch(this.fetchUrl);\n    const data = await response.json();\n    this.stockEvents = data; // const stockEvents: any[] = data;\n\n    console.log((_this$stockEvents = this.stockEvents) === null || _this$stockEvents === void 0 ? void 0 : _this$stockEvents.length);\n    console.log(this.stockEvents);\n\n    for (let i = 0; i < ((_this$stockEvents2 = this.stockEvents) === null || _this$stockEvents2 === void 0 ? void 0 : _this$stockEvents2.length); i++) {\n      var _this$stockEvents2;\n\n      let tempString = JSON.stringify(this.stockEvents[i]); //extract(stockEvents[i]);\n\n      let obj = JSON.parse(tempString);\n      let dailyExchangeObj = {\n        date: obj.Date,\n        high: obj.High,\n        low: obj.Low,\n        open: obj.Open,\n        volume: obj.Volume,\n        close: obj.Close\n      };\n      this.dailyValues.push(dailyExchangeObj);\n    }\n\n    this.populateGraphValue(); //   .catch((err) => {\n    //     console.log(\"There was an error in fetching\", err);\n    //   });\n    // this.onFetchData(this.fetchUrl).then((response) => {\n    //   const stockEvents: any[] = response;\n    //   console.log(stockEvents?.length);\n    //   console.log(stockEvents);\n    //   for (let i: number = 0; i < stockEvents?.length; i++) {\n    //     let tempString: string = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n    //     let obj = JSON.parse(tempString);\n    //     let dailyExchangeObj: DailyExchange = {\n    //       date: obj.Date,\n    //       high: obj.High,\n    //       low: obj.Low,\n    //       open: obj.Open,\n    //       volume: obj.Volume,\n    //       close: obj.Close,\n    //     };\n    //     this.dailyValues.push(dailyExchangeObj);\n    //   }\n    //   this.populateGraphValue();\n    // });\n\n    this.setState({\n      loading: false\n    }); // this.readyToRender = true;\n  }\n\n  render() {\n    // // const { this.props , {},  } = this.state\n    // const isLoading = this.readyToRender;\n    // // const bugs = this.bugStore.bugs\n    // console.log(\"REAdY TO RENDER\" + this.readyToRender);\n    return this.state.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        alignItems: \"center\",\n        margin: \"12px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingBottom: \"15px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/home\",\n          type: \"button\",\n          children: \"Go to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Pick the chart to display:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.value,\n            onChange: this.handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Close\",\n              children: \"Select from Menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Open\",\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Volume\",\n              children: \"Volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Close\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"High\",\n              children: \"High\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Low\",\n              children: \"Low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: this.extension,\n          style: {\n            paddingLeft: \"8px\"\n          },\n          children: [\"Visualize\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [!this.isVolume ? /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            // x: [1, 2, 3, 7],\n            // y: [2, 6, 3, 9],\n            x: this.xx,\n            y: this.yy,\n            type: \"scatter\",\n            // mode: \"lines+markers\",\n            mode: \"lines\",\n            marker: {\n              color: \"red\"\n            },\n            name: \"Data\"\n          }] //onClick={window.alert(\"I clicked on a dot\")}\n          ,\n          legend: {\n            orientation: \"h\",\n            yanchor: \"right\"\n          },\n          layout: {\n            showlegend: true,\n            width: 1000,\n            height: 600,\n            title: {\n              text: this.GraphTitle,\n              font: {\n                size: 24\n              }\n            },\n            grid: {\n              yside: \"right plot\"\n            },\n            xaxis: {\n              visible: true,\n              color: \"#2c3e50\",\n              title: {\n                text: \"Dates\"\n              }\n            },\n            yaxis: {\n              visible: true,\n              color: \"#2c3e50\",\n              title: {\n                text: \"Values\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), this.isVolume ? /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: this.xx,\n            y: this.yy,\n            type: \"bar\",\n            mode: \"lines\",\n            marker: {\n              color: \"red\"\n            }\n          }],\n          layout: {\n            width: 1000,\n            height: 600,\n            title: this.GraphTitle\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        fluid: \"md\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \" change start Date \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                  selected: this.startDate,\n                  onChange: date => this.startDate = date,\n                  showTimeSelect: true,\n                  dateFormat: \"Pp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \" change End Date \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n                  selected: this.endDate,\n                  onChange: date => this.endDate = date,\n                  showTimeSelect: true,\n                  dateFormat: \"Pp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SingleGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plot\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/classes/SingleGragh/index.tsx"],"names":["React","companies","Link","DatePicker","Container","Row","Col","Plotly","createPlotlyComponent","Plot","SingleGraph","Component","constructor","props","company","option","dailyValues","dailyValuesOrdinate","dates","fetchUrl","trigger","extension","value","xx","yy","isVolume","startDate","Date","endDate","GraphTitle","readyToRender","stockEvents","state","loading","populateGraphValue","i","length","tempDate","toDateObject","date","manageOption","push","obj","close","high","low","volume","open","dateString","temp","split","setFullYear","parseInt","onFetchData","toFetch","response","fetch","then","console","log","json","catch","err","Promise","resolve","handleChange","event","linkvalue","target","setState","valueoh","toLowerCase","match","params","fetching","find","comp","JsonUrl","companyName","name","toUpperCase","componentDidMount","data","tempString","JSON","stringify","parse","dailyExchangeObj","High","Low","Open","Volume","Close","render","alignItems","margin","paddingBottom","paddingLeft","x","y","type","mode","marker","color","orientation","yanchor","showlegend","width","height","title","text","font","size","grid","yside","xaxis","visible","yaxis"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Spin } from \"antd\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nimport Plotly from \"plotly.js\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\nexport interface SingleGraphProps\n  extends RouteComponentProps<{ company: string; option: string }> {\n  // Other props that belong to component it self not Router\n}\n\ntype DailyExchange = {\n  date: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  adjClose?: number;\n  volume: number;\n};\n\nclass SingleGraph extends React.Component<SingleGraphProps> {\n  private company: string;\n  private option: string;\n\n  dailyValues: DailyExchange[] = [];\n  dailyValuesOrdinate: number[] = [];\n  dates: Date[] = [];\n  //   const defaultStartDate: Date = new Date(2000, 0, 0);\n  //   const defaultEndDate: Date = new Date();\n\n  fetchUrl: any;\n  trigger: boolean = true;\n  extension: string = \"\";\n  value: string = \"Close\";\n  xx: Date[] = [];\n  yy: number[] = [];\n  isVolume: boolean;\n  startDate: Date = new Date(2000, 0, 0);\n  endDate: Date = new Date();\n  GraphTitle: string;\n  readyToRender: boolean;\n  stockEvents: any[] = [];\n\n  state = {\n    loading: true,\n  };\n\n  constructor(props: SingleGraphProps) {\n    super(props);\n    this.company = this.props.match.params.company;\n    this.option = this.props.match.params.option;\n    this.isVolume = this.value === \"Volume\";\n    const fetching = companies.companies.find(\n      (comp) => comp.company === this.company\n    )?.JsonUrl;\n    console.log(\"we are fetching: \" + fetching);\n\n    const companyName = companies.companies.find(\n      (comp) => comp.company === this.company\n    )?.name;\n\n    this.GraphTitle =\n      companyName?.toUpperCase() + \" - Stock Market: (\" + this.option + \")\";\n    this.value = this.option;\n\n    this.fetchUrl = fetching;\n    this.readyToRender = false;\n  }\n\n  private populateGraphValue = () => {\n    for (let i = 0; i < this.dailyValues.length; i++) {\n      const tempDate = this.toDateObject(this.dailyValues[i].date);\n      if (tempDate >= this.startDate && tempDate <= this.endDate) {\n        this.manageOption(this.dailyValues[i]);\n        this.dates.push(tempDate);\n      }\n    }\n    this.xx = this.dates;\n    this.yy = this.dailyValuesOrdinate;\n  };\n\n  private manageOption = (obj: DailyExchange): void => {\n    switch (this.option) {\n      case \"close\":\n        this.dailyValuesOrdinate.push(obj.close);\n        break;\n      case \"high\":\n        this.dailyValuesOrdinate.push(obj.high);\n        break;\n      case \"low\":\n        this.dailyValuesOrdinate.push(obj.low);\n        break;\n      case \"volume\":\n        this.dailyValuesOrdinate.push(obj.volume);\n        this.isVolume = true;\n        break;\n      case \"open\":\n        this.dailyValuesOrdinate.push(obj.open);\n        break;\n      default:\n        this.dailyValuesOrdinate.push(obj.close);\n        break;\n    }\n  };\n\n  private toDateObject = (dateString: string): Date => {\n    const temp: string[] = dateString.split(\"-\");\n    const date: Date = new Date();\n    date.setFullYear(parseInt(temp[0]), parseInt(temp[1]), parseInt(temp[2]));\n    return date;\n  };\n\n  private onFetchData = async (toFetch: string) => {\n    const response = await fetch(toFetch)\n      .then(function (response: any) {\n        console.log(\"Successful fetch at \" + toFetch);\n        return response.json();\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n    return Promise.resolve(response);\n  };\n\n  //   change: function(event){\n  //     this.setState({value: event.target.value});\n  // },\n\n  private handleChange = (event) => {\n    const linkvalue: string = event.target.value;\n    this.setState({ valueoh: event.target.value });\n    this.value = linkvalue;\n    this.extension = \"/visual/\" + this.company + \"/\" + linkvalue.toLowerCase();\n    console.log(this.extension);\n  };\n\n  async componentDidMount() {\n    const response = await fetch(this.fetchUrl);\n    const data = await response.json();\n\n    this.stockEvents = data;\n    // const stockEvents: any[] = data;\n    console.log(this.stockEvents?.length);\n    console.log(this.stockEvents);\n    for (let i: number = 0; i < this.stockEvents?.length; i++) {\n      let tempString: string = JSON.stringify(this.stockEvents[i]); //extract(stockEvents[i]);\n      let obj = JSON.parse(tempString);\n      let dailyExchangeObj: DailyExchange = {\n        date: obj.Date,\n        high: obj.High,\n        low: obj.Low,\n        open: obj.Open,\n        volume: obj.Volume,\n        close: obj.Close,\n      };\n      this.dailyValues.push(dailyExchangeObj);\n    }\n    this.populateGraphValue();\n    //   .catch((err) => {\n    //     console.log(\"There was an error in fetching\", err);\n    //   });\n\n    // this.onFetchData(this.fetchUrl).then((response) => {\n    //   const stockEvents: any[] = response;\n    //   console.log(stockEvents?.length);\n    //   console.log(stockEvents);\n    //   for (let i: number = 0; i < stockEvents?.length; i++) {\n    //     let tempString: string = JSON.stringify(stockEvents[i]); //extract(stockEvents[i]);\n    //     let obj = JSON.parse(tempString);\n    //     let dailyExchangeObj: DailyExchange = {\n    //       date: obj.Date,\n    //       high: obj.High,\n    //       low: obj.Low,\n    //       open: obj.Open,\n    //       volume: obj.Volume,\n    //       close: obj.Close,\n    //     };\n    //     this.dailyValues.push(dailyExchangeObj);\n    //   }\n    //   this.populateGraphValue();\n    // });\n    this.setState({ loading: false });\n    // this.readyToRender = true;\n  }\n\n  public render() {\n    // // const { this.props , {},  } = this.state\n    // const isLoading = this.readyToRender;\n    // // const bugs = this.bugStore.bugs\n    // console.log(\"REAdY TO RENDER\" + this.readyToRender);\n\n    return this.state.loading ? (\n      <div style={{ alignItems: \"center\", margin: \"12px\" }}>\n        <div style={{ paddingBottom: \"15px\" }}>\n          <Link to={\"/home\"} type=\"button\">\n            Go to Home\n          </Link>\n        </div>\n        <div>\n          <label>\n            Pick the chart to display:\n            <select value={this.value} onChange={this.handleChange}>\n              <option value=\"Close\">Select from Menu</option>\n              <option value=\"Open\">Open</option>\n              <option value=\"Volume\">Volume</option>\n              <option value=\"Close\">Close</option>\n              <option value=\"High\">High</option>\n              <option value=\"Low\">Low</option>\n            </select>\n          </label>\n          <a href={this.extension} style={{ paddingLeft: \"8px\" }}>\n            Visualize{\" \"}\n          </a>\n        </div>\n        <div>\n          {!this.isVolume ? (\n            <Plot\n              data={[\n                {\n                  // x: [1, 2, 3, 7],\n                  // y: [2, 6, 3, 9],\n                  x: this.xx,\n                  y: this.yy,\n                  type: \"scatter\",\n                  // mode: \"lines+markers\",\n                  mode: \"lines\",\n                  marker: { color: \"red\" },\n                  name: \"Data\",\n                },\n              ]}\n              //onClick={window.alert(\"I clicked on a dot\")}\n              legend={{\n                orientation: \"h\",\n                yanchor: \"right\",\n              }}\n              layout={{\n                showlegend: true,\n                width: 1000,\n                height: 600,\n                title: {\n                  text: this.GraphTitle,\n                  font: {\n                    size: 24,\n                  },\n                },\n                grid: {\n                  yside: \"right plot\",\n                },\n                xaxis: {\n                  visible: true,\n                  color: \"#2c3e50\",\n                  title: {\n                    text: \"Dates\",\n                  },\n                },\n                yaxis: {\n                  visible: true,\n                  color: \"#2c3e50\",\n                  title: {\n                    text: \"Values\",\n                  },\n                },\n              }}\n            />\n          ) : (\n            <div></div>\n          )}\n          {this.isVolume ? (\n            <Plot\n              data={[\n                {\n                  x: this.xx,\n                  y: this.yy,\n                  type: \"bar\",\n                  mode: \"lines\",\n                  marker: { color: \"red\" },\n                },\n              ]}\n              layout={{\n                width: 1000,\n                height: 600,\n                title: this.GraphTitle,\n              }}\n            />\n          ) : (\n            <div></div>\n          )}\n        </div>\n        <Container fluid=\"md\">\n          <Row>\n            <div>\n              <Col>\n                <div>\n                  <h3> change start Date </h3>\n                  <DatePicker\n                    selected={this.startDate}\n                    onChange={(date) => (this.startDate = date)}\n                    showTimeSelect\n                    dateFormat=\"Pp\"\n                  />\n                </div>\n              </Col>\n              <Col>\n                <div>\n                  <h3> change End Date </h3>\n                  <DatePicker\n                    selected={this.endDate}\n                    onChange={(date) => (this.endDate = date)}\n                    showTimeSelect\n                    dateFormat=\"Pp\"\n                  />\n                </div>\n              </Col>\n            </div>\n          </Row>\n        </Container>\n      </div>\n    ) : (\n      <div>...Loading</div>\n    );\n  }\n}\n\nexport default SingleGraph;\n"]},"metadata":{},"sourceType":"module"}