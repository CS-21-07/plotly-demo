{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport \"react-datepicker/dist/react-datepicker.css\"; // npm install react-datepicker --save\n\n//npm install react-bootstrap bootstrap\nconst SelectedPoint = ({\n  company,\n  dates\n}) => {\n  _s();\n\n  // setting to props parameters\n  console.log(company);\n  console.log(dates);\n  const cleanDate = dates.length !== 0 ? dates[0].split(\" \")[0] : \"\";\n  console.log(cleanDate);\n  let plotGraphData = [];\n  const [dataGraph, setDataGraph] = useState([]);\n  useEffect(() => {\n    // async function myFetch(toFetch: string): Promise<any[]> {\n    //   const response = await fetch(toFetch)\n    //     .then(function (response: any) {\n    //       console.log(\"Successful fetch at \" + toFetch);\n    //       return response.json();\n    //     })\n    //     .catch((err) => {\n    //       console.log(\"There was an error in fetching\", err);\n    //     });\n    //   return Promise.resolve(response);\n    // }\n    async function myFetch(toFetch) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch); //   return Promise.resolve(response);\n\n      return response;\n    }\n\n    let myFetches = [];\n    let companiesFetched = [];\n    company.forEach(id => {\n      if (id !== \"\") {\n        var _companies$companies$, _companies$companies$2;\n\n        const fetching = (_companies$companies$ = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$ === void 0 ? void 0 : _companies$companies$.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n        const companyName = (_companies$companies$2 = companies.companies.find(comp => comp.id === id)) === null || _companies$companies$2 === void 0 ? void 0 : _companies$companies$2.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n    companiesFetched.reverse();\n    console.log(myFetches);\n    Promise.all(myFetches).then(files => {\n      files.forEach(file => {\n        process(file.json(), String(companiesFetched.pop()));\n      });\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    }); //   dates.forEach((date) => {\n    //       cleanDates.push(date.split(\" \")[0]);\n    //   })\n  }, []);\n\n  function process(prom, graphTitle) {\n    let dailyValues = [];\n    prom.then(data => {\n      const stockEvents = data;\n      console.log(stockEvents === null || stockEvents === void 0 ? void 0 : stockEvents.length);\n      console.log(stockEvents);\n      stockEvents.forEach(stocky => {\n        let tempString = JSON.stringify(stocky); //extract(stockEvents[i]);\n\n        let obj = JSON.parse(tempString);\n\n        if (obj.Date === cleanDate) {\n          let dailyExchangeObj = {\n            date: obj.Date,\n            high: obj.High,\n            low: obj.Low,\n            open: obj.Open,\n            volume: obj.Volume,\n            close: obj.Close\n          };\n          dailyValues.push(dailyExchangeObj);\n        }\n      });\n      populateGraphValue(dailyValues, graphTitle);\n    }).catch(err => {\n      console.log(\"There was an error in fetching\", err);\n    });\n  }\n\n  function populateGraphValue(dailyValuesList, graphTitle) {\n    console.log(dailyValuesList);\n    dailyValuesList.forEach(daily => {\n      let tempObj = {\n        name: graphTitle,\n        daily: daily\n      };\n      console.log(tempObj);\n      plotGraphData = dataGraph;\n      plotGraphData.push(daily);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of data in my list \" + dataGraph.length);\n    });\n    dates = [];\n  }\n\n  function displayStock(dailyObj) {\n    console.log(dailyObj);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: dailyObj.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Date: \", dailyObj.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Volume: \", dailyObj.volume]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Open: \", dailyObj.open]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Close: \", dailyObj.close]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"High: \", dailyObj.high]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Low: \", dailyObj.low]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  }\n\n  function DisplayAll() {\n    return dataGraph.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", displayStock(item)]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 14\n      }, this);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      alignItems: \"center\",\n      margin: \"12px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"These are the selected values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), DisplayAll]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SelectedPoint, \"3gYrbCMjpgLIGGW8FYbL9Dx8dyk=\");\n\n_c = SelectedPoint;\nexport default SelectedPoint;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedPoint\");","map":{"version":3,"sources":["/Users/benajasandrain/GitHub/plotly-demo/src/pages/Components/SelectedPoint.tsx"],"names":["React","useState","useEffect","companies","SelectedPoint","company","dates","console","log","cleanDate","length","split","plotGraphData","dataGraph","setDataGraph","myFetch","toFetch","response","fetch","myFetches","companiesFetched","forEach","id","fetching","find","comp","JsonUrl","companyName","name","push","String","reverse","Promise","all","then","files","file","process","json","pop","catch","err","prom","graphTitle","dailyValues","data","stockEvents","stocky","tempString","JSON","stringify","obj","parse","Date","dailyExchangeObj","date","high","High","low","Low","open","Open","volume","Volume","close","Close","populateGraphValue","dailyValuesList","daily","tempObj","displayStock","dailyObj","DisplayAll","map","item","alignItems","margin"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\n// import Plot from \"react-plotly.js\";\nimport * as companies from \"../../data/urlMatcher.json\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-dropdown-select\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n// npm install react-datepicker --save\nimport { Container, Row, Col } from \"react-bootstrap\";\n//npm install react-bootstrap bootstrap\n\nconst SelectedPoint: React.FC<{ company: string[]; dates: string[] }> = ({\n  company,\n  dates,\n}) => {\n  // setting to props parameters\n  console.log(company);\n  console.log(dates);\n  const cleanDate: string = dates.length !== 0 ? dates[0].split(\" \")[0] : \"\";\n  console.log(cleanDate);\n\n  type DailyExchange = {\n    date: string;\n    open: number;\n    high: number;\n    low: number;\n    close: number;\n    adjClose?: number;\n    volume: number;\n  };\n\n  type DailyDisplay = {\n    name: string;\n    daily: DailyExchange;\n  };\n\n  let plotGraphData: any[] = [];\n\n  const [dataGraph, setDataGraph] = useState<any[]>([]);\n\n  useEffect(() => {\n    // async function myFetch(toFetch: string): Promise<any[]> {\n    //   const response = await fetch(toFetch)\n    //     .then(function (response: any) {\n    //       console.log(\"Successful fetch at \" + toFetch);\n    //       return response.json();\n    //     })\n    //     .catch((err) => {\n    //       console.log(\"There was an error in fetching\", err);\n    //     });\n    //   return Promise.resolve(response);\n    // }\n\n    async function myFetch(toFetch: string) {\n      console.log(\"fetching2: \" + toFetch);\n      const response = await fetch(toFetch);\n      //   return Promise.resolve(response);\n      return response;\n    }\n\n    let myFetches: any[] = [];\n    let companiesFetched: string[] = [];\n\n    company.forEach((id) => {\n      if (id !== \"\") {\n        const fetching = companies.companies.find((comp) => comp.id === id)\n          ?.JsonUrl;\n        console.log(\"we are fetching: \" + fetching);\n\n        const companyName = companies.companies.find((comp) => comp.id === id)\n          ?.name;\n        console.log(\"Company we are fetching: \" + companyName);\n        companiesFetched.push(String(companyName));\n        console.log(\"fetching: \" + fetching);\n        myFetches.push(myFetch(String(fetching)));\n      }\n    });\n\n    companiesFetched.reverse();\n    console.log(myFetches);\n    Promise.all(myFetches)\n      .then((files) => {\n        files.forEach((file) => {\n          process(file.json(), String(companiesFetched.pop()));\n        });\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n\n    //   dates.forEach((date) => {\n    //       cleanDates.push(date.split(\" \")[0]);\n    //   })\n  }, []);\n\n  function process(prom, graphTitle: string) {\n    let dailyValues: DailyExchange[] = [];\n    prom\n      .then((data) => {\n        const stockEvents: any[] = data;\n        console.log(stockEvents?.length);\n        console.log(stockEvents);\n        stockEvents.forEach((stocky) => {\n          let tempString: string = JSON.stringify(stocky); //extract(stockEvents[i]);\n          let obj = JSON.parse(tempString);\n          if (obj.Date === cleanDate) {\n            let dailyExchangeObj: DailyExchange = {\n              date: obj.Date,\n              high: obj.High,\n              low: obj.Low,\n              open: obj.Open,\n              volume: obj.Volume,\n              close: obj.Close,\n            };\n            dailyValues.push(dailyExchangeObj);\n          }\n        });\n        populateGraphValue(dailyValues, graphTitle);\n      })\n      .catch((err) => {\n        console.log(\"There was an error in fetching\", err);\n      });\n  }\n\n  function populateGraphValue(\n    dailyValuesList: any[],\n    graphTitle: string\n  ): void {\n    console.log(dailyValuesList);\n    dailyValuesList.forEach((daily) => {\n      let tempObj: DailyDisplay = {\n        name: graphTitle,\n        daily: daily,\n      };\n\n      console.log(tempObj);\n      plotGraphData = dataGraph;\n      plotGraphData.push(daily);\n      setDataGraph(plotGraphData);\n      console.log(\"Number of data in my list \" + dataGraph.length);\n    });\n    dates = [];\n  }\n\n  function displayStock(dailyObj) {\n    console.log(dailyObj);\n    return (\n      <div>\n        <h3>{dailyObj.name}</h3>\n        <ul>\n          <li>Date: {dailyObj.date}</li>\n          <li>Volume: {dailyObj.volume}</li>\n          <li>Open: {dailyObj.open}</li>\n          <li>Close: {dailyObj.close}</li>\n          <li>High: {dailyObj.high}</li>\n          <li>Low: {dailyObj.low}</li>\n        </ul>\n      </div>\n    );\n  }\n\n  function DisplayAll() {\n    return dataGraph.map((item) => {\n      return <div key={item}> {displayStock(item)}</div>;\n    });\n  }\n\n  return (\n    <div style={{ alignItems: \"center\", margin: \"12px\" }}>\n      <div>These are the selected values</div>\n      {DisplayAll}\n    </div>\n  );\n};\n\nexport default SelectedPoint;\n"]},"metadata":{},"sourceType":"module"}